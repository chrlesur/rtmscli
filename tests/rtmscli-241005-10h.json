[
  {
    "name": "appliances.go",
    "content": "package cmd\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar appliancesCmd = \u0026cobra.Command{\n\tUse:   \"appliances\",\n\tShort: \"Manage appliances\",\n\tLong:  `Commands to manage and interact with appliances in the RTMS system.`,\n}\n\nfunc init() {\n\trootCmd.AddCommand(appliancesCmd)\n\n\t// Subcommands\n\tappliancesCmd.AddCommand(getAppliancesCmd)\n\tappliancesCmd.AddCommand(getApplianceDetailsCmd)\n\tappliancesCmd.AddCommand(getApplianceServicesCmd)\n\tappliancesCmd.AddCommand(synchronizeApplianceCmd)\n\tappliancesCmd.AddCommand(getApplianceConfigurationCmd)\n\tappliancesCmd.AddCommand(getApplianceHealthCheckCmd)\n\tappliancesCmd.AddCommand(postApplianceHealthCheckCmd)\n}\n\nvar getAppliancesCmd = \u0026cobra.Command{\n\tUse:   \"list\",\n\tShort: \"Get a list of appliances\",\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\tcloudTempleID, _ := cmd.Flags().GetString(\"cloud-temple-id\")\n\t\tresponse, err := client.GetAppliances(cloudTempleID)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tformat, _ := cmd.Flags().GetString(\"format\")\n\t\tformattedOutput, err := formatOutput(response, format)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(formattedOutput)\n\t\treturn nil\n\t},\n}\n\nvar getApplianceDetailsCmd = \u0026cobra.Command{\n\tUse:   \"details [id]\",\n\tShort: \"Get Appliance details\",\n\tArgs:  cobra.ExactArgs(1),\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\tresponse, err := client.GetApplianceDetails(args[0])\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tformat, _ := cmd.Flags().GetString(\"format\")\n\t\tformattedOutput, err := formatOutput(response, format)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(formattedOutput)\n\t\treturn nil\n\t},\n}\n\nvar getApplianceServicesCmd = \u0026cobra.Command{\n\tUse:   \"services [id]\",\n\tShort: \"Get Appliance services\",\n\tArgs:  cobra.ExactArgs(1),\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\tresponse, err := client.GetApplianceServices(args[0])\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tformat, _ := cmd.Flags().GetString(\"format\")\n\t\tformattedOutput, err := formatOutput(response, format)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(formattedOutput)\n\t\treturn nil\n\t},\n}\n\nvar synchronizeApplianceCmd = \u0026cobra.Command{\n\tUse:   \"synchronize [id]\",\n\tShort: \"Synchronize Appliance\",\n\tArgs:  cobra.ExactArgs(1),\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\tresponse, err := client.SynchronizeAppliance(args[0])\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tformat, _ := cmd.Flags().GetString(\"format\")\n\t\tformattedOutput, err := formatOutput(response, format)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(formattedOutput)\n\t\treturn nil\n\t},\n}\n\nvar getApplianceConfigurationCmd = \u0026cobra.Command{\n\tUse:   \"configuration [id]\",\n\tShort: \"Get appliances configuration\",\n\tArgs:  cobra.ExactArgs(1),\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\tapplianceVersion, _ := cmd.Flags().GetString(\"appliance-version\")\n\t\tpluginsPath, _ := cmd.Flags().GetString(\"plugins-path\")\n\t\tresponse, err := client.GetApplianceConfiguration(args[0], applianceVersion, pluginsPath)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tformat, _ := cmd.Flags().GetString(\"format\")\n\t\tformattedOutput, err := formatOutput(response, format)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(formattedOutput)\n\t\treturn nil\n\t},\n}\n\nvar getApplianceHealthCheckCmd = \u0026cobra.Command{\n\tUse:   \"healthcheck [id]\",\n\tShort: \"Get a last heartbeat of an appliance\",\n\tArgs:  cobra.ExactArgs(1),\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\tresponse, err := client.GetApplianceHealthCheck(args[0])\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tformat, _ := cmd.Flags().GetString(\"format\")\n\t\tformattedOutput, err := formatOutput(response, format)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(formattedOutput)\n\t\treturn nil\n\t},\n}\n\nvar postApplianceHealthCheckCmd = \u0026cobra.Command{\n\tUse:   \"post-healthcheck [id]\",\n\tShort: \"Posts an appliance heartbeat\",\n\tArgs:  cobra.ExactArgs(1),\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\tapplianceVersion, _ := cmd.Flags().GetString(\"appliance-version\")\n\t\tnagiosOperatingState, _ := cmd.Flags().GetString(\"nagios-operating-state\")\n\t\tdetails, _ := cmd.Flags().GetString(\"details\")\n\n\t\thealthCheck := map[string]interface{}{\n\t\t\t\"applianceVersion\":     applianceVersion,\n\t\t\t\"nagiosOperatingState\": nagiosOperatingState,\n\t\t\t\"details\":              details,\n\t\t}\n\n\t\tresponse, err := client.PostApplianceHealthCheck(args[0], healthCheck)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tformat, _ := cmd.Flags().GetString(\"format\")\n\t\tformattedOutput, err := formatOutput(response, format)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(formattedOutput)\n\t\treturn nil\n\t},\n}\n\nfunc init() {\n\tgetApplianceConfigurationCmd.Flags().String(\"appliance-version\", \"\", \"Appliance version\")\n\tgetApplianceConfigurationCmd.Flags().String(\"plugins-path\", \"\", \"Absolute path to the plugins installation directory on the appliance\")\n\tgetApplianceConfigurationCmd.MarkFlagRequired(\"appliance-version\")\n\tgetApplianceConfigurationCmd.MarkFlagRequired(\"plugins-path\")\n\n\tpostApplianceHealthCheckCmd.Flags().String(\"appliance-version\", \"\", \"Appliance version\")\n\tpostApplianceHealthCheckCmd.Flags().String(\"nagios-operating-state\", \"\", \"Nagios operating state (OK, WARNING, CRITICAL)\")\n\tpostApplianceHealthCheckCmd.Flags().String(\"details\", \"\", \"Any details to explain the current operating state\")\n\tpostApplianceHealthCheckCmd.MarkFlagRequired(\"appliance-version\")\n\tpostApplianceHealthCheckCmd.MarkFlagRequired(\"nagios-operating-state\")\n}\n",
    "size": 5422,
    "modTime": "2024-10-03T20:08:08.6013807+02:00",
    "path": "cmd\\appliances.go"
  },
  {
    "name": "catalogs.go",
    "content": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar catalogsCmd = \u0026cobra.Command{\n\tUse:   \"catalogs\",\n\tShort: \"Manage ticket classification catalogs\",\n\tLong:  `Commands to manage and interact with ticket classification catalogs in the RTMS system.`,\n}\n\nfunc init() {\n\trootCmd.AddCommand(catalogsCmd)\n\n\t// Get catalogs\n\tgetCatalogsCmd := \u0026cobra.Command{\n\t\tUse:   \"list\",\n\t\tShort: \"Get a list of Ticket classification catalogs and items\",\n\t}\n\tgetCatalogsCmd.Flags().Bool(\"available-items\", false, \"Show classification catalog with their available items\")\n\tgetCatalogsCmd.Flags().Bool(\"is-root\", false, \"If true, only classification root catalogs will be displayed\")\n\n\tupdateListCommand(getCatalogsCmd, \"/catalogs\", func() map[string]string {\n\t\tparams := make(map[string]string)\n\t\tparams[\"cloudTempleId\"] = cloudTempleID\n\n\t\tavailableItems, _ := getCatalogsCmd.Flags().GetBool(\"available-items\")\n\t\tparams[\"availableItems\"] = strconv.FormatBool(availableItems)\n\n\t\tisRoot, _ := getCatalogsCmd.Flags().GetBool(\"is-root\")\n\t\tparams[\"isRoot\"] = strconv.FormatBool(isRoot)\n\n\t\treturn params\n\t})\n\n\tcatalogsCmd.AddCommand(getCatalogsCmd)\n\n\t// Get default catalogs\n\tgetDefaultCatalogsCmd := \u0026cobra.Command{\n\t\tUse:   \"defaults\",\n\t\tShort: \"Get a list of all default ticket classification catalogs and catalog items\",\n\t}\n\tgetDefaultCatalogsCmd.Flags().Bool(\"available-items\", false, \"Show classification catalog with their available items\")\n\tgetDefaultCatalogsCmd.Flags().Bool(\"is-root\", false, \"If true, only classification root catalogs will be displayed\")\n\n\tupdateListCommand(getDefaultCatalogsCmd, \"/catalogs/defaults\", func() map[string]string {\n\t\tparams := make(map[string]string)\n\n\t\tavailableItems, _ := getDefaultCatalogsCmd.Flags().GetBool(\"available-items\")\n\t\tparams[\"availableItems\"] = strconv.FormatBool(availableItems)\n\n\t\tisRoot, _ := getDefaultCatalogsCmd.Flags().GetBool(\"is-root\")\n\t\tparams[\"isRoot\"] = strconv.FormatBool(isRoot)\n\n\t\treturn params\n\t})\n\n\tcatalogsCmd.AddCommand(getDefaultCatalogsCmd)\n\n\t// Get catalog items\n\tgetCatalogItemsCmd := \u0026cobra.Command{\n\t\tUse:   \"items [catalog-id]\",\n\t\tShort: \"Get a list of items for a catalog\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t}\n\tgetCatalogItemsCmd.Flags().Bool(\"enabled\", false, \"Display only enabled or disabled catalog items\")\n\n\tupdateListCommand(getCatalogItemsCmd, \"/catalogs/{id}/items\", func() map[string]string {\n\t\tparams := make(map[string]string)\n\n\t\tenabled, _ := getCatalogItemsCmd.Flags().GetBool(\"enabled\")\n\t\tparams[\"enabled\"] = strconv.FormatBool(enabled)\n\n\t\treturn params\n\t})\n\n\tcatalogsCmd.AddCommand(getCatalogItemsCmd)\n\n\t// Get root catalog\n\tgetRootCatalogCmd := \u0026cobra.Command{\n\t\tUse:   \"root\",\n\t\tShort: \"Get the root required catalog\",\n\t}\n\tgetRootCatalogCmd.Flags().String(\"type\", \"\", \"Required Catalog type (origin, perimeter, or nature)\")\n\tgetRootCatalogCmd.Flags().Bool(\"available-items\", false, \"Display associated catalog items\")\n\tgetRootCatalogCmd.MarkFlagRequired(\"type\")\n\n\tgetRootCatalogCmd.RunE = func(cmd *cobra.Command, args []string) error {\n\t\tcatalogType, _ := cmd.Flags().GetString(\"type\")\n\t\tavailableItems, _ := cmd.Flags().GetBool(\"available-items\")\n\t\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\t\tresponse, err := client.GetRootCatalog(catalogType, availableItems)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tformattedOutput, err := formatOutput(response, format)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(formattedOutput)\n\t\treturn nil\n\t}\n\n\tcatalogsCmd.AddCommand(getRootCatalogCmd)\n}\n",
    "size": 3485,
    "modTime": "2024-10-03T20:09:12.5107454+02:00",
    "path": "cmd\\catalogs.go"
  },
  {
    "name": "host_tags.go",
    "content": "package cmd\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar hostTagsCmd = \u0026cobra.Command{\n\tUse:   \"tags\",\n\tShort: \"Manage host tags\",\n\tLong:  `Manage host tags, including listing, creating, updating, and deleting tags, as well as listing hosts for a specific tag.`,\n}\n\nfunc init() {\n\thostsCmd.AddCommand(hostTagsCmd)\n\n\t// Get host tags\n\tgetHostTagsCmd := \u0026cobra.Command{\n\t\tUse:   \"list\",\n\t\tShort: \"Get a list of host tags\",\n\t\tRunE:  getHostTags,\n\t}\n\tgetHostTagsCmd.Flags().String(\"label\", \"\", \"Filter by label\")\n\thostTagsCmd.AddCommand(getHostTagsCmd)\n\n\t// Create host tag\n\tcreateHostTagCmd := \u0026cobra.Command{\n\t\tUse:   \"create\",\n\t\tShort: \"Create a host tag\",\n\t\tRunE:  createHostTag,\n\t}\n\tcreateHostTagCmd.Flags().String(\"label\", \"\", \"Tag label\")\n\tcreateHostTagCmd.Flags().String(\"description\", \"\", \"Tag description\")\n\tcreateHostTagCmd.Flags().IntSlice(\"hosts\", nil, \"List of host IDs to associate with the tag\")\n\tcreateHostTagCmd.MarkFlagRequired(\"label\")\n\thostTagsCmd.AddCommand(createHostTagCmd)\n\n\t// Get host tag details\n\tgetHostTagDetailsCmd := \u0026cobra.Command{\n\t\tUse:   \"details [id]\",\n\t\tShort: \"Get details of a tag\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getHostTagDetails,\n\t}\n\thostTagsCmd.AddCommand(getHostTagDetailsCmd)\n\n\t// Remove host tag\n\tremoveHostTagCmd := \u0026cobra.Command{\n\t\tUse:   \"remove [id]\",\n\t\tShort: \"Remove a host tag\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  removeHostTag,\n\t}\n\thostTagsCmd.AddCommand(removeHostTagCmd)\n\n\t// Edit host tag\n\teditHostTagCmd := \u0026cobra.Command{\n\t\tUse:   \"edit [id]\",\n\t\tShort: \"Edit host tag\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  editHostTag,\n\t}\n\teditHostTagCmd.Flags().String(\"label\", \"\", \"Tag label\")\n\teditHostTagCmd.Flags().String(\"description\", \"\", \"Tag description\")\n\teditHostTagCmd.Flags().IntSlice(\"hosts\", nil, \"List of host IDs to associate with the tag\")\n\thostTagsCmd.AddCommand(editHostTagCmd)\n\n\t// Get hosts by tag\n\tgetHostsByTagCmd := \u0026cobra.Command{\n\t\tUse:   \"hosts [id]\",\n\t\tShort: \"Gets hosts that match a given tag\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getHostsByTag,\n\t}\n\thostTagsCmd.AddCommand(getHostsByTagCmd)\n}\n\nfunc getHostTags(cmd *cobra.Command, args []string) error {\n\tlabel, _ := cmd.Flags().GetString(\"label\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tparams := make(map[string]string)\n\tif label != \"\" {\n\t\tparams[\"label\"] = label\n\t}\n\n\tresponse, err := client.GetHostTags(cloudTempleID, params)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc createHostTag(cmd *cobra.Command, args []string) error {\n\tlabel, _ := cmd.Flags().GetString(\"label\")\n\tdescription, _ := cmd.Flags().GetString(\"description\")\n\thosts, _ := cmd.Flags().GetIntSlice(\"hosts\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\ttagData := map[string]interface{}{\n\t\t\"label\": label,\n\t}\n\tif description != \"\" {\n\t\ttagData[\"description\"] = description\n\t}\n\tif len(hosts) \u003e 0 {\n\t\ttagData[\"hosts\"] = hosts\n\t}\n\n\tresponse, err := client.CreateHostTag(cloudTempleID, tagData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getHostTagDetails(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetHostTagDetails(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc removeHostTag(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.RemoveHostTag(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc editHostTag(cmd *cobra.Command, args []string) error {\n\tlabel, _ := cmd.Flags().GetString(\"label\")\n\tdescription, _ := cmd.Flags().GetString(\"description\")\n\thosts, _ := cmd.Flags().GetIntSlice(\"hosts\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\ttagData := make(map[string]interface{})\n\tif label != \"\" {\n\t\ttagData[\"label\"] = label\n\t}\n\tif description != \"\" {\n\t\ttagData[\"description\"] = description\n\t}\n\tif len(hosts) \u003e 0 {\n\t\ttagData[\"hosts\"] = hosts\n\t}\n\n\tresponse, err := client.EditHostTag(args[0], tagData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getHostsByTag(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetHostsByTag(args[0], nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n",
    "size": 5456,
    "modTime": "2024-10-03T20:10:19.9586589+02:00",
    "path": "cmd\\host_tags.go"
  },
  {
    "name": "hosts.go",
    "content": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar hostsCmd = \u0026cobra.Command{\n\tUse:   \"hosts\",\n\tShort: \"Manage hosts\",\n\tLong:  `Manage hosts, including listing, creating, updating, and deleting hosts, as well as managing their services and monitoring.`,\n}\n\nfunc init() {\n\trootCmd.AddCommand(hostsCmd)\n\n\t// Get hosts\n\tgetHostsCmd := \u0026cobra.Command{\n\t\tUse:   \"list\",\n\t\tShort: \"Get a list of Hosts\",\n\t}\n\tgetHostsCmd.Flags().String(\"name\", \"\", \"Filter hosts by name\")\n\tgetHostsCmd.Flags().StringSlice(\"status\", nil, \"Filter by hosts status (UP, DOWN, PENDING, UNREACHABLE)\")\n\tgetHostsCmd.Flags().Bool(\"is-monitored\", false, \"Filter by monitored hosts\")\n\n\tupdateListCommand(getHostsCmd, \"/hosts\", func() map[string]string {\n\t\tparams := make(map[string]string)\n\t\tparams[\"cloudTempleId\"] = cloudTempleID\n\n\t\tname, _ := getHostsCmd.Flags().GetString(\"name\")\n\t\tif name != \"\" {\n\t\t\tparams[\"name\"] = name\n\t\t}\n\n\t\tstatus, _ := getHostsCmd.Flags().GetStringSlice(\"status\")\n\t\tif len(status) \u003e 0 {\n\t\t\tparams[\"status[]\"] = fmt.Sprintf(\"[%s]\", strconv.Quote(status[0]))\n\t\t}\n\n\t\tisMonitored, _ := getHostsCmd.Flags().GetBool(\"is-monitored\")\n\t\tif isMonitored {\n\t\t\tparams[\"isMonitored\"] = \"true\"\n\t\t}\n\n\t\treturn params\n\t})\n\n\thostsCmd.AddCommand(getHostsCmd)\n\n\t// Create host\n\tcreateHostCmd := \u0026cobra.Command{\n\t\tUse:   \"create\",\n\t\tShort: \"Create a new Host\",\n\t\tRunE:  createHost,\n\t}\n\tcreateHostCmd.Flags().String(\"name\", \"\", \"Host name\")\n\tcreateHostCmd.Flags().String(\"address\", \"\", \"Host monitoring ip address\")\n\tcreateHostCmd.MarkFlagRequired(\"name\")\n\tcreateHostCmd.MarkFlagRequired(\"address\")\n\thostsCmd.AddCommand(createHostCmd)\n\n\t// Get host details\n\tgetHostDetailsCmd := \u0026cobra.Command{\n\t\tUse:   \"details [id]\",\n\t\tShort: \"Get Host details\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getHostDetails,\n\t}\n\thostsCmd.AddCommand(getHostDetailsCmd)\n\n\t// Remove host\n\tremoveHostCmd := \u0026cobra.Command{\n\t\tUse:   \"remove [id]\",\n\t\tShort: \"Remove Host\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  removeHost,\n\t}\n\thostsCmd.AddCommand(removeHostCmd)\n\n\t// Update host\n\tupdateHostCmd := \u0026cobra.Command{\n\t\tUse:   \"update [id]\",\n\t\tShort: \"Update a Host\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  updateHost,\n\t}\n\tupdateHostCmd.Flags().String(\"name\", \"\", \"Host name\")\n\tupdateHostCmd.Flags().String(\"address\", \"\", \"Host monitoring ip address\")\n\thostsCmd.AddCommand(updateHostCmd)\n\n\t// Get host services\n\tgetHostServicesCmd := \u0026cobra.Command{\n\t\tUse:   \"services [id]\",\n\t\tShort: \"Get Host services\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getHostServices,\n\t}\n\thostsCmd.AddCommand(getHostServicesCmd)\n\n\t// Update host tags\n\tupdateHostTagsCmd := \u0026cobra.Command{\n\t\tUse:   \"update-tags [id]\",\n\t\tShort: \"Update Host tags\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  updateHostTags,\n\t}\n\tupdateHostTagsCmd.Flags().IntSlice(\"tags\", nil, \"List of tag IDs\")\n\tupdateHostTagsCmd.MarkFlagRequired(\"tags\")\n\thostsCmd.AddCommand(updateHostTagsCmd)\n\n\t// Switch host monitoring\n\tswitchHostMonitoringCmd := \u0026cobra.Command{\n\t\tUse:   \"switch-monitoring [id]\",\n\t\tShort: \"Disable/enable monitoring for all or specific host's services\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  switchHostMonitoring,\n\t}\n\tswitchHostMonitoringCmd.Flags().Bool(\"enable\", false, \"Enable or disable monitoring\")\n\tswitchHostMonitoringCmd.Flags().IntSlice(\"services\", nil, \"List of service IDs\")\n\tswitchHostMonitoringCmd.MarkFlagRequired(\"enable\")\n\thostsCmd.AddCommand(switchHostMonitoringCmd)\n\n\t// Switch host monitoring notifications\n\tswitchHostMonitoringNotificationsCmd := \u0026cobra.Command{\n\t\tUse:   \"switch-notifications [id]\",\n\t\tShort: \"Disable/enable monitoring notifications for all or specific host's services\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  switchHostMonitoringNotifications,\n\t}\n\tswitchHostMonitoringNotificationsCmd.Flags().Bool(\"enable\", false, \"Enable or disable notifications\")\n\tswitchHostMonitoringNotificationsCmd.Flags().IntSlice(\"services\", nil, \"List of service IDs\")\n\tswitchHostMonitoringNotificationsCmd.MarkFlagRequired(\"enable\")\n\thostsCmd.AddCommand(switchHostMonitoringNotificationsCmd)\n\n\t// Get hosts stats\n\tgetHostsStatsCmd := \u0026cobra.Command{\n\t\tUse:   \"stats\",\n\t\tShort: \"Get hosts status stats\",\n\t\tRunE:  getHostsStats,\n\t}\n\thostsCmd.AddCommand(getHostsStatsCmd)\n}\n\nfunc getHosts(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tname, _ := cmd.Flags().GetString(\"name\")\n\tstatus, _ := cmd.Flags().GetStringSlice(\"status\")\n\tisMonitored, _ := cmd.Flags().GetBool(\"is-monitored\")\n\n\tparams := make(map[string]string)\n\tparams[\"cloudTempleId\"] = cloudTempleID\n\tif name != \"\" {\n\t\tparams[\"name\"] = name\n\t}\n\tif len(status) \u003e 0 {\n\t\tparams[\"status[]\"] = fmt.Sprintf(\"[%s]\", strconv.Quote(status[0]))\n\t}\n\tif isMonitored {\n\t\tparams[\"isMonitored\"] = \"true\"\n\t}\n\n\tdataChan, errChan := client.StreamData(\"/hosts\", params, batchSize)\n\n\tvar hosts []interface{}\n\tvar processingError error\n\n\tfor {\n\t\tselect {\n\t\tcase item, ok := \u003c-dataChan:\n\t\t\tif !ok {\n\t\t\t\t// Le canal de données est fermé, arrêtez le traitement\n\t\t\t\tgoto ProcessingComplete\n\t\t\t}\n\t\t\thosts = append(hosts, item)\n\t\tcase err, ok := \u003c-errChan:\n\t\t\tif !ok {\n\t\t\t\t// Le canal d'erreurs est fermé, continuez le traitement\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// Une erreur s'est produite, arrêtez le traitement\n\t\t\tprocessingError = fmt.Errorf(\"erreur lors de la récupération des hôtes : %w\", err)\n\t\t\tgoto ProcessingComplete\n\t\t}\n\t}\n\nProcessingComplete:\n\tif processingError != nil {\n\t\treturn processingError\n\t}\n\n\t// Formatage de la sortie\n\toutput, err := formatOutput(hosts, format)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"erreur lors du formatage de la sortie des hôtes : %w\", err)\n\t}\n\n\t// Affichage de la sortie\n\tfmt.Fprintln(os.Stdout, output)\n\n\treturn nil\n}\n\nfunc createHost(cmd *cobra.Command, args []string) error {\n\tname, _ := cmd.Flags().GetString(\"name\")\n\taddress, _ := cmd.Flags().GetString(\"address\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\thostData := map[string]interface{}{\n\t\t\"name\":    name,\n\t\t\"address\": address,\n\t}\n\n\tresponse, err := client.CreateHost(cloudTempleID, hostData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getHostDetails(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetHostDetails(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc removeHost(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.RemoveHost(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc updateHost(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tname, _ := cmd.Flags().GetString(\"name\")\n\taddress, _ := cmd.Flags().GetString(\"address\")\n\n\thostData := make(map[string]interface{})\n\tif name != \"\" {\n\t\thostData[\"name\"] = name\n\t}\n\tif address != \"\" {\n\t\thostData[\"address\"] = address\n\t}\n\n\tresponse, err := client.UpdateHost(args[0], hostData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getHostServices(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetHostServices(args[0], nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc updateHostTags(cmd *cobra.Command, args []string) error {\n\ttags, _ := cmd.Flags().GetIntSlice(\"tags\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.UpdateHostTags(args[0], tags)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc switchHostMonitoring(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tenable, _ := cmd.Flags().GetBool(\"enable\")\n\tservices, _ := cmd.Flags().GetIntSlice(\"services\")\n\tresponse, err := client.SwitchHostMonitoring(args[0], enable, services)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc switchHostMonitoringNotifications(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tenable, _ := cmd.Flags().GetBool(\"enable\")\n\tservices, _ := cmd.Flags().GetIntSlice(\"services\")\n\tresponse, err := client.SwitchHostMonitoringNotifications(args[0], enable, services)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getHostsStats(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetHostsStats(cloudTempleID)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n",
    "size": 10227,
    "modTime": "2024-10-03T21:32:21.8010122+02:00",
    "path": "cmd\\hosts.go"
  },
  {
    "name": "monitoring.go",
    "content": "package cmd\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar monitoringCmd = \u0026cobra.Command{\n\tUse:   \"monitoring\",\n\tShort: \"Check the health of RTMS services\",\n\tLong:  `Check the health status of RTMS services and the SLA Calculator application.`,\n}\n\nfunc init() {\n\trootCmd.AddCommand(monitoringCmd)\n\n\t// Check RTMS health\n\tcheckRTMSHealthCmd := \u0026cobra.Command{\n\t\tUse:   \"health\",\n\t\tShort: \"Check if RTMS services are healthy\",\n\t\tRunE:  checkRTMSHealth,\n\t}\n\tcheckRTMSHealthCmd.Flags().IntSlice(\"integration-services\", nil, \"List of service identifiers used to test the delay of integration of monitoring results\")\n\tcheckRTMSHealthCmd.Flags().Int(\"integration-delay\", 0, \"Delay allowed in seconds to test the delay of integration of monitoring results\")\n\tmonitoringCmd.AddCommand(checkRTMSHealthCmd)\n\n\t// Check SLA Calculator health\n\tcheckSLACalculatorHealthCmd := \u0026cobra.Command{\n\t\tUse:   \"sla-calculator\",\n\t\tShort: \"Check if the SLA Calculator app is healthy\",\n\t\tRunE:  checkSLACalculatorHealth,\n\t}\n\tcheckSLACalculatorHealthCmd.Flags().Int(\"update-delay\", 0, \"Delay allowed in seconds between the current time and the last update of a ticket's SLA\")\n\tmonitoringCmd.AddCommand(checkSLACalculatorHealthCmd)\n}\n\nfunc checkRTMSHealth(cmd *cobra.Command, args []string) error {\n\tintegrationServices, _ := cmd.Flags().GetIntSlice(\"integration-services\")\n\tintegrationDelay, _ := cmd.Flags().GetInt(\"integration-delay\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tresponse, err := client.CheckRTMSHealth(integrationServices, integrationDelay)\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc checkSLACalculatorHealth(cmd *cobra.Command, args []string) error {\n\tupdateDelay, _ := cmd.Flags().GetInt(\"update-delay\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tresponse, err := client.CheckSLACalculatorHealth(updateDelay)\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n",
    "size": 2111,
    "modTime": "2024-10-03T20:20:02.3875545+02:00",
    "path": "cmd\\monitoring.go"
  },
  {
    "name": "monitoring_service_notifications.go",
    "content": "package cmd\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar monitoringServiceNotificationsCmd = \u0026cobra.Command{\n\tUse:   \"notifications\",\n\tShort: \"Manage monitoring service notifications\",\n\tLong:  `Manage notifications for monitoring services, including listing, creating, attaching, and detaching notifications.`,\n}\n\nfunc init() {\n\tmonitoringServicesCmd.AddCommand(monitoringServiceNotificationsCmd)\n\n\t// Get service notifications\n\tgetServiceNotificationsCmd := \u0026cobra.Command{\n\t\tUse:   \"list-service [service-id]\",\n\t\tShort: \"Get a list of notifications of specific service\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t}\n\tgetServiceNotificationsCmd.Flags().Bool(\"attach\", false, \"List only notifications attached to a ticket or not\")\n\tupdateListCommand(getServiceNotificationsCmd, \"/monitoringServices/{id}/notifications\", func() map[string]string {\n\t\tparams := make(map[string]string)\n\t\tattach, _ := getServiceNotificationsCmd.Flags().GetBool(\"attach\")\n\t\tif attach {\n\t\t\tparams[\"attach\"] = \"true\"\n\t\t}\n\t\treturn params\n\t})\n\tmonitoringServiceNotificationsCmd.AddCommand(getServiceNotificationsCmd)\n\n\t// Get all notifications\n\tgetAllNotificationsCmd := \u0026cobra.Command{\n\t\tUse:   \"list\",\n\t\tShort: \"Get a list of all notifications\",\n\t}\n\tgetAllNotificationsCmd.Flags().Bool(\"attach\", false, \"List only notifications attached to a ticket or not\")\n\tgetAllNotificationsCmd.Flags().IntSlice(\"staffs\", nil, \"Filter by staff identifiers\")\n\tgetAllNotificationsCmd.Flags().IntSlice(\"perimeters\", nil, \"Filter by perimeter identifiers\")\n\tupdateListCommand(getAllNotificationsCmd, \"/monitoringServices/notifications\", func() map[string]string {\n\t\tparams := make(map[string]string)\n\t\tparams[\"cloudTempleId\"] = cloudTempleID\n\t\tattach, _ := getAllNotificationsCmd.Flags().GetBool(\"attach\")\n\t\tif attach {\n\t\t\tparams[\"attach\"] = \"true\"\n\t\t}\n\t\tstaffs, _ := getAllNotificationsCmd.Flags().GetIntSlice(\"staffs\")\n\t\tif len(staffs) \u003e 0 {\n\t\t\tparams[\"staffs[]\"] = intSliceToString(staffs)\n\t\t}\n\t\tperimeters, _ := getAllNotificationsCmd.Flags().GetIntSlice(\"perimeters\")\n\t\tif len(perimeters) \u003e 0 {\n\t\t\tparams[\"perimeters[]\"] = intSliceToString(perimeters)\n\t\t}\n\t\treturn params\n\t})\n\tmonitoringServiceNotificationsCmd.AddCommand(getAllNotificationsCmd)\n\n\t// Create notification\n\tcreateNotificationCmd := \u0026cobra.Command{\n\t\tUse:   \"create\",\n\t\tShort: \"Create a new notification\",\n\t\tRunE:  createNotification,\n\t}\n\tcreateNotificationCmd.Flags().Int(\"service-id\", 0, \"Monitoring service ID\")\n\tcreateNotificationCmd.Flags().String(\"state\", \"\", \"State of monitoring service (OK, WARNING, CRITICAL, UNKNOWN)\")\n\tcreateNotificationCmd.Flags().String(\"content\", \"\", \"Content of the notification\")\n\tcreateNotificationCmd.Flags().String(\"subject\", \"\", \"Subject that will be sent by email/sms\")\n\tcreateNotificationCmd.MarkFlagRequired(\"service-id\")\n\tcreateNotificationCmd.MarkFlagRequired(\"state\")\n\tcreateNotificationCmd.MarkFlagRequired(\"content\")\n\tcreateNotificationCmd.MarkFlagRequired(\"subject\")\n\tmonitoringServiceNotificationsCmd.AddCommand(createNotificationCmd)\n\n\t// Get notification details\n\tgetNotificationDetailsCmd := \u0026cobra.Command{\n\t\tUse:   \"details [id]\",\n\t\tShort: \"Get notification details\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getNotificationDetails,\n\t}\n\tmonitoringServiceNotificationsCmd.AddCommand(getNotificationDetailsCmd)\n\n\t// Get ticket suggestions\n\tgetTicketSuggestionsCmd := \u0026cobra.Command{\n\t\tUse:   \"suggest [id]\",\n\t\tShort: \"Get a ticket suggestion against a notification\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getTicketSuggestions,\n\t}\n\tmonitoringServiceNotificationsCmd.AddCommand(getTicketSuggestionsCmd)\n\n\t// Attach notification to ticket\n\tattachNotificationCmd := \u0026cobra.Command{\n\t\tUse:   \"attach [id]\",\n\t\tShort: \"Attach notification to a ticket\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  attachNotificationToTicket,\n\t}\n\tattachNotificationCmd.Flags().Int(\"ticket-id\", 0, \"Ticket ID to attach the notification to\")\n\tattachNotificationCmd.MarkFlagRequired(\"ticket-id\")\n\tmonitoringServiceNotificationsCmd.AddCommand(attachNotificationCmd)\n\n\t// Detach notification from ticket\n\tdetachNotificationCmd := \u0026cobra.Command{\n\t\tUse:   \"detach [id]\",\n\t\tShort: \"Detach notification from a ticket\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  detachNotificationFromTicket,\n\t}\n\tmonitoringServiceNotificationsCmd.AddCommand(detachNotificationCmd)\n}\n\nfunc createNotification(cmd *cobra.Command, args []string) error {\n\tserviceID, _ := cmd.Flags().GetInt(\"service-id\")\n\tstate, _ := cmd.Flags().GetString(\"state\")\n\tcontent, _ := cmd.Flags().GetString(\"content\")\n\tsubject, _ := cmd.Flags().GetString(\"subject\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tnotificationData := map[string]interface{}{\n\t\t\"monitoringServiceId\": serviceID,\n\t\t\"state\":               state,\n\t\t\"content\":             content,\n\t\t\"subject\":             subject,\n\t}\n\n\tresponse, err := client.CreateNotification(notificationData)\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getNotificationDetails(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetNotificationDetails(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getTicketSuggestions(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetTicketSuggestions(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc attachNotificationToTicket(cmd *cobra.Command, args []string) error {\n\tticketID, _ := cmd.Flags().GetInt(\"ticket-id\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.AttachNotificationToTicket(args[0], ticketID)\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc detachNotificationFromTicket(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.DetachNotificationFromTicket(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n",
    "size": 6448,
    "modTime": "2024-10-03T20:15:05.7113933+02:00",
    "path": "cmd\\monitoring_service_notifications.go"
  },
  {
    "name": "monitoring_service_performance.go",
    "content": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar monitoringServicePerformanceCmd = \u0026cobra.Command{\n\tUse:   \"performance\",\n\tShort: \"Manage monitoring service performance data\",\n\tLong:  `Manage monitoring service performance data, including metric history and graph configurations.`,\n}\n\nfunc init() {\n\tmonitoringServicesCmd.AddCommand(monitoringServicePerformanceCmd)\n\n\t// Get metric history\n\tgetMetricHistoryCmd := \u0026cobra.Command{\n\t\tUse:   \"metric-history [service-id]\",\n\t\tShort: \"Get a list of metrics versions for a given monitoring service\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t}\n\tgetMetricHistoryCmd.Flags().String(\"start-date\", \"\", \"Start date timestamp or milliseconds of searched period\")\n\tgetMetricHistoryCmd.Flags().String(\"end-date\", \"\", \"End date timestamp or milliseconds of searched period\")\n\tgetMetricHistoryCmd.Flags().StringSlice(\"metric-name\", nil, \"List of metric names\")\n\tgetMetricHistoryCmd.Flags().String(\"version-order\", \"\", \"Version order: asc or desc\")\n\tupdateListCommand(getMetricHistoryCmd, \"/monitoringServices/{id}/metricHistory\", func() map[string]string {\n\t\tparams := make(map[string]string)\n\t\tstartDate, _ := getMetricHistoryCmd.Flags().GetString(\"start-date\")\n\t\tif startDate != \"\" {\n\t\t\tparams[\"startDate\"] = startDate\n\t\t}\n\t\tendDate, _ := getMetricHistoryCmd.Flags().GetString(\"end-date\")\n\t\tif endDate != \"\" {\n\t\t\tparams[\"endDate\"] = endDate\n\t\t}\n\t\tmetricNames, _ := getMetricHistoryCmd.Flags().GetStringSlice(\"metric-name\")\n\t\tif len(metricNames) \u003e 0 {\n\t\t\tparams[\"metricName[]\"] = strings.Join(metricNames, \",\")\n\t\t}\n\t\tversionOrder, _ := getMetricHistoryCmd.Flags().GetString(\"version-order\")\n\t\tif versionOrder != \"\" {\n\t\t\tparams[\"versionOrder\"] = versionOrder\n\t\t}\n\t\treturn params\n\t})\n\tmonitoringServicePerformanceCmd.AddCommand(getMetricHistoryCmd)\n\n\t// Get graph configurations\n\tgetGraphConfigurationsCmd := \u0026cobra.Command{\n\t\tUse:   \"graph-configurations [service-id]\",\n\t\tShort: \"Get a list of graph configurations for a given monitoring service\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t}\n\tgetGraphConfigurationsCmd.Flags().String(\"label\", \"\", \"Filter graph by a string contained in label field\")\n\tupdateListCommand(getGraphConfigurationsCmd, \"/monitoringServices/{id}/graphs\", func() map[string]string {\n\t\tparams := make(map[string]string)\n\t\tlabel, _ := getGraphConfigurationsCmd.Flags().GetString(\"label\")\n\t\tif label != \"\" {\n\t\t\tparams[\"label\"] = label\n\t\t}\n\t\treturn params\n\t})\n\tmonitoringServicePerformanceCmd.AddCommand(getGraphConfigurationsCmd)\n}\n\nfunc getMetricHistory(cmd *cobra.Command, args []string) error {\n\tserviceID := args[0]\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tstartDate, _ := cmd.Flags().GetString(\"start-date\")\n\tendDate, _ := cmd.Flags().GetString(\"end-date\")\n\tmetricNames, _ := cmd.Flags().GetStringSlice(\"metric-name\")\n\tversionOrder, _ := cmd.Flags().GetString(\"version-order\")\n\n\tparams := make(map[string]string)\n\tif startDate != \"\" {\n\t\tparams[\"startDate\"] = startDate\n\t}\n\tif endDate != \"\" {\n\t\tparams[\"endDate\"] = endDate\n\t}\n\tif len(metricNames) \u003e 0 {\n\t\tparams[\"metricName[]\"] = strings.Join(metricNames, \",\")\n\t}\n\tif versionOrder != \"\" {\n\t\tparams[\"versionOrder\"] = versionOrder\n\t}\n\n\tdataChan, errChan := client.StreamData(fmt.Sprintf(\"/monitoringServices/%s/metricHistory\", serviceID), params, batchSize)\n\n\tfor item := range dataChan {\n\t\tformattedOutput, err := formatOutput(item, format)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(formattedOutput)\n\t}\n\n\tif err := \u003c-errChan; err != nil {\n\t\treturn fmt.Errorf(\"erreur lors de la récupération de l'historique des métriques : %w\", err)\n\t}\n\n\treturn nil\n}\n\nfunc getGraphConfigurations(cmd *cobra.Command, args []string) error {\n\tserviceID := args[0]\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tlabel, _ := cmd.Flags().GetString(\"label\")\n\n\tparams := make(map[string]string)\n\tif label != \"\" {\n\t\tparams[\"label\"] = label\n\t}\n\n\tdataChan, errChan := client.StreamData(fmt.Sprintf(\"/monitoringServices/%s/graphs\", serviceID), params, batchSize)\n\n\tfor item := range dataChan {\n\t\tformattedOutput, err := formatOutput(item, format)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(formattedOutput)\n\t}\n\n\tif err := \u003c-errChan; err != nil {\n\t\treturn fmt.Errorf(\"erreur lors de la récupération des configurations de graphiques : %w\", err)\n\t}\n\n\treturn nil\n}",
    "size": 4270,
    "modTime": "2024-10-03T20:18:02.1743518+02:00",
    "path": "cmd\\monitoring_service_performance.go"
  },
  {
    "name": "monitoring_services.go",
    "content": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar monitoringServicesCmd = \u0026cobra.Command{\n\tUse:   \"monitoring-services\",\n\tShort: \"Manage monitoring services\",\n\tLong:  `Manage monitoring services, including listing, creating, updating, and deleting services, as well as managing templates and viewing statistics.`,\n}\n\nfunc init() {\n\trootCmd.AddCommand(monitoringServicesCmd)\n\n\t\n\t// Get monitoring services\n\tgetMonitoringServicesCmd := \u0026cobra.Command{\n\t\tUse:   \"list\",\n\t\tShort: \"Get a list of monitoring services\",\n\t}\n\tgetMonitoringServicesCmd.Flags().String(\"name\", \"\", \"Filter services by name\")\n\tgetMonitoringServicesCmd.Flags().StringSlice(\"status\", nil, \"Filter services by status\")\n\tgetMonitoringServicesCmd.Flags().StringSlice(\"impact\", nil, \"Filter services by impact\")\n\n\tupdateListCommand(getMonitoringServicesCmd, \"/monitoringServices\", func() map[string]string {\n\t\tparams := make(map[string]string)\n\t\tparams[\"cloudTempleId\"] = cloudTempleID\n\n\t\tname, _ := getMonitoringServicesCmd.Flags().GetString(\"name\")\n\t\tif name != \"\" {\n\t\t\tparams[\"name\"] = name\n\t\t}\n\n\t\tstatus, _ := getMonitoringServicesCmd.Flags().GetStringSlice(\"status\")\n\t\tif len(status) \u003e 0 {\n\t\t\tparams[\"status[]\"] = strings.Join(status, \",\")\n\t\t}\n\n\t\timpact, _ := getMonitoringServicesCmd.Flags().GetStringSlice(\"impact\")\n\t\tif len(impact) \u003e 0 {\n\t\t\tparams[\"impact[]\"] = strings.Join(impact, \",\")\n\t\t}\n\n\t\treturn params\n\t})\n\n\tmonitoringServicesCmd.AddCommand(getMonitoringServicesCmd)\n\n\t// Create monitoring service\n\tcreateMonitoringServiceCmd := \u0026cobra.Command{\n\t\tUse:   \"create\",\n\t\tShort: \"Create a monitoring service\",\n\t\tRunE:  createMonitoringService,\n\t}\n\tcreateMonitoringServiceCmd.Flags().String(\"name\", \"\", \"Monitoring service name\")\n\tcreateMonitoringServiceCmd.Flags().Int(\"appliance\", 0, \"Appliance ID\")\n\tcreateMonitoringServiceCmd.Flags().Int(\"host\", 0, \"Host ID\")\n\tcreateMonitoringServiceCmd.Flags().Int(\"template\", 0, \"Template ID\")\n\tcreateMonitoringServiceCmd.MarkFlagRequired(\"name\")\n\tcreateMonitoringServiceCmd.MarkFlagRequired(\"appliance\")\n\tcreateMonitoringServiceCmd.MarkFlagRequired(\"host\")\n\tcreateMonitoringServiceCmd.MarkFlagRequired(\"template\")\n\tmonitoringServicesCmd.AddCommand(createMonitoringServiceCmd)\n\n\t// Get monitoring service details\n\tgetMonitoringServiceDetailsCmd := \u0026cobra.Command{\n\t\tUse:   \"details [id]\",\n\t\tShort: \"Get monitoring service details\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getMonitoringServiceDetails,\n\t}\n\tmonitoringServicesCmd.AddCommand(getMonitoringServiceDetailsCmd)\n\n\t// Remove monitoring service\n\tremoveMonitoringServiceCmd := \u0026cobra.Command{\n\t\tUse:   \"remove [id]\",\n\t\tShort: \"Remove monitoring service\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  removeMonitoringService,\n\t}\n\tmonitoringServicesCmd.AddCommand(removeMonitoringServiceCmd)\n\n\t// Update monitoring service\n\tupdateMonitoringServiceCmd := \u0026cobra.Command{\n\t\tUse:   \"update [id]\",\n\t\tShort: \"Update a monitoring service\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  updateMonitoringService,\n\t}\n\tupdateMonitoringServiceCmd.Flags().String(\"name\", \"\", \"Monitoring service name\")\n\tupdateMonitoringServiceCmd.Flags().Int(\"appliance\", 0, \"Appliance ID\")\n\tupdateMonitoringServiceCmd.Flags().Int(\"host\", 0, \"Host ID\")\n\tupdateMonitoringServiceCmd.Flags().Int(\"template\", 0, \"Template ID\")\n\tmonitoringServicesCmd.AddCommand(updateMonitoringServiceCmd)\n\n\t// Get monitoring service templates\n\tgetMonitoringServiceTemplatesCmd := \u0026cobra.Command{\n\t\tUse:   \"templates\",\n\t\tShort: \"Get monitoring services templates list\",\n\t\tRunE:  getMonitoringServiceTemplates,\n\t}\n\tgetMonitoringServiceTemplatesCmd.Flags().String(\"name\", \"\", \"Filter template by name\")\n\tgetMonitoringServiceTemplatesCmd.Flags().StringSlice(\"impact\", nil, \"Filter templates by impact\")\n\tmonitoringServicesCmd.AddCommand(getMonitoringServiceTemplatesCmd)\n\n\t// Get monitoring services stats\n\tgetMonitoringServicesStatsCmd := \u0026cobra.Command{\n\t\tUse:   \"stats\",\n\t\tShort: \"Get monitoring services status and impact stats\",\n\t\tRunE:  getMonitoringServicesStats,\n\t}\n\tgetMonitoringServicesStatsCmd.Flags().Int(\"host-id\", 0, \"Show stats of filtered monitoring services by host\")\n\tgetMonitoringServicesStatsCmd.Flags().Int(\"appliance-id\", 0, \"Show stats of filtered monitoring services by appliance\")\n\tmonitoringServicesCmd.AddCommand(getMonitoringServicesStatsCmd)\n}\n\nfunc createMonitoringService(cmd *cobra.Command, args []string) error {\n\tname, _ := cmd.Flags().GetString(\"name\")\n\tappliance, _ := cmd.Flags().GetInt(\"appliance\")\n\thost, _ := cmd.Flags().GetInt(\"host\")\n\ttemplate, _ := cmd.Flags().GetInt(\"template\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tserviceData := map[string]interface{}{\n\t\t\"name\":      name,\n\t\t\"appliance\": appliance,\n\t\t\"host\":      host,\n\t\t\"template\":  template,\n\t}\n\n\tresponse, err := client.CreateMonitoringService(cloudTempleID, serviceData)\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getMonitoringServiceDetails(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetMonitoringServiceDetails(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc removeMonitoringService(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.RemoveMonitoringService(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc updateMonitoringService(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tserviceData := make(map[string]interface{})\n\n\tif name, _ := cmd.Flags().GetString(\"name\"); name != \"\" {\n\t\tserviceData[\"name\"] = name\n\t}\n\tif appliance, _ := cmd.Flags().GetInt(\"appliance\"); appliance != 0 {\n\t\tserviceData[\"appliance\"] = appliance\n\t}\n\tif host, _ := cmd.Flags().GetInt(\"host\"); host != 0 {\n\t\tserviceData[\"host\"] = host\n\t}\n\tif template, _ := cmd.Flags().GetInt(\"template\"); template != 0 {\n\t\tserviceData[\"template\"] = template\n\t}\n\n\tresponse, err := client.UpdateMonitoringService(args[0], serviceData)\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getMonitoringServiceTemplates(cmd *cobra.Command, args []string) error {\n\tname, _ := cmd.Flags().GetString(\"name\")\n\timpact, _ := cmd.Flags().GetStringSlice(\"impact\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tparams := make(map[string]string)\n\tif name != \"\" {\n\t\tparams[\"name\"] = name\n\t}\n\tif len(impact) \u003e 0 {\n\t\tparams[\"impact\"] = fmt.Sprintf(\"[%s]\", strings.Join(impact, \",\"))\n\t}\n\n\tdataChan, errChan := client.StreamData(\"/monitoringServices/templates\", params, batchSize)\n\n\tfor item := range dataChan {\n\t\tformattedOutput, err := formatOutput(item, format)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(formattedOutput)\n\t}\n\n\tif err := \u003c-errChan; err != nil {\n\t\treturn fmt.Errorf(\"erreur lors de la récupération des templates : %w\", err)\n\t}\n\n\treturn nil\n}\n\nfunc getMonitoringServicesStats(cmd *cobra.Command, args []string) error {\n\thostID, _ := cmd.Flags().GetInt(\"host-id\")\n\tapplianceID, _ := cmd.Flags().GetInt(\"appliance-id\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tparams := make(map[string]string)\n\tparams[\"cloudTempleId\"] = cloudTempleID\n\tif hostID != 0 {\n\t\tparams[\"hostId\"] = fmt.Sprintf(\"%d\", hostID)\n\t}\n\tif applianceID != 0 {\n\t\tparams[\"applianceId\"] = fmt.Sprintf(\"%d\", applianceID)\n\t}\n\n\tresponse, err := client.GetMonitoringServicesStats(cloudTempleID, params)\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n",
    "size": 7925,
    "modTime": "2024-10-03T21:42:33.7833803+02:00",
    "path": "cmd\\monitoring_services.go"
  },
  {
    "name": "nagios.go",
    "content": "package cmd\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar nagiosCmd = \u0026cobra.Command{\n\tUse:   \"nagios\",\n\tShort: \"Manage Nagios commands and plugins\",\n\tLong:  `Manage Nagios commands and plugins, including listing commands, time periods, and validating plugins.`,\n}\n\nfunc init() {\n\trootCmd.AddCommand(nagiosCmd)\n\n\t// Get Nagios commands\n\tgetNagiosCommandsCmd := \u0026cobra.Command{\n\t\tUse:   \"commands\",\n\t\tShort: \"Get a list of Nagios commands\",\n\t\tRunE:  getNagiosCommands,\n\t}\n\tgetNagiosCommandsCmd.Flags().String(\"name\", \"\", \"Filter by name\")\n\tnagiosCmd.AddCommand(getNagiosCommandsCmd)\n\n\t// Get Nagios commands time periods\n\tgetNagiosCommandsTimePeriodsCmd := \u0026cobra.Command{\n\t\tUse:   \"time-periods\",\n\t\tShort: \"Get Nagios commands execution time periods list\",\n\t\tRunE:  getNagiosCommandsTimePeriods,\n\t}\n\tgetNagiosCommandsTimePeriodsCmd.Flags().String(\"name\", \"\", \"Filter timeperiod by name\")\n\tgetNagiosCommandsTimePeriodsCmd.Flags().String(\"alias\", \"\", \"Filter timeperiods by alias\")\n\tnagiosCmd.AddCommand(getNagiosCommandsTimePeriodsCmd)\n\n\t// Validate Nagios plugin package\n\tvalidateNagiosPluginPackageCmd := \u0026cobra.Command{\n\t\tUse:   \"validate-plugin\",\n\t\tShort: \"Validate a Nagios plugin package\",\n\t\tRunE:  validateNagiosPluginPackage,\n\t}\n\tvalidateNagiosPluginPackageCmd.Flags().String(\"package\", \"\", \"JSON string of the Nagios Plugin package's composer.json\")\n\tvalidateNagiosPluginPackageCmd.MarkFlagRequired(\"package\")\n\tnagiosCmd.AddCommand(validateNagiosPluginPackageCmd)\n\n\t// Update Nagios commands\n\tupdateNagiosCommandsCmd := \u0026cobra.Command{\n\t\tUse:   \"update-commands\",\n\t\tShort: \"Update Nagios commands\",\n\t\tRunE:  updateNagiosCommands,\n\t}\n\tnagiosCmd.AddCommand(updateNagiosCommandsCmd)\n}\n\nfunc getNagiosCommands(cmd *cobra.Command, args []string) error {\n\tname, _ := cmd.Flags().GetString(\"name\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tparams := make(map[string]string)\n\tif name != \"\" {\n\t\tparams[\"name\"] = name\n\t}\n\n\tresponse, err := client.GetNagiosCommands(params)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getNagiosCommandsTimePeriods(cmd *cobra.Command, args []string) error {\n\tname, _ := cmd.Flags().GetString(\"name\")\n\talias, _ := cmd.Flags().GetString(\"alias\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tparams := make(map[string]string)\n\tif name != \"\" {\n\t\tparams[\"name\"] = name\n\t}\n\tif alias != \"\" {\n\t\tparams[\"alias\"] = alias\n\t}\n\n\tresponse, err := client.GetNagiosCommandsTimePeriods(cloudTempleID, params)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc validateNagiosPluginPackage(cmd *cobra.Command, args []string) error {\n\tpackageJSON, _ := cmd.Flags().GetString(\"package\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tvar packageData map[string]interface{}\n\terr := json.Unmarshal([]byte(packageJSON), \u0026packageData)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"invalid JSON: %v\", err)\n\t}\n\n\tresponse, err := client.ValidateNagiosPluginPackage(packageData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc updateNagiosCommands(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.UpdateNagiosCommands()\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n",
    "size": 4040,
    "modTime": "2024-10-03T20:21:10.4468421+02:00",
    "path": "cmd\\nagios.go"
  },
  {
    "name": "root.go",
    "content": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/chrlesur/rtmscli/pkg/api\"\n\t\"github.com/spf13/cobra\"\n)\n\nconst (\n\tVersion = \"1.2.0 beta release\"\n)\n\nvar (\n\tcloudTempleID string\n\thost          string\n\tclient        *api.RTMSClient\n\toutputFormat  string\n\tlimit         int\n\tbatchSize     int\n\tfilter        string\n)\n\nvar rootCmd = \u0026cobra.Command{\n\tUse:   \"rtmscli\",\n\tShort: \"RTMS CLI est une interface en ligne de commande pour l'API RTMS\",\n\tLong: fmt.Sprintf(`RTMS CLI (version %s) vous permet d'interagir avec l'API RTMS depuis la ligne de commande.\nIl fournit des commandes pour gérer les appliances, les hôtes, les tickets et plus encore.`, Version),\n\tPersistentPreRunE: func(cmd *cobra.Command, args []string) error {\n\t\t// Ignorer l'initialisation du client pour la commande version\n\t\tif cmd.Use == \"version\" {\n\t\t\treturn nil\n\t\t}\n\n\t\t// Valider le format de sortie\n\t\tif outputFormat != \"json\" \u0026\u0026 outputFormat != \"html\" \u0026\u0026 outputFormat != \"markdown\" {\n\t\t\treturn fmt.Errorf(\"format de sortie invalide : %s. Les formats supportés sont json, html et markdown\", outputFormat)\n\t\t}\n\n\t\t// Initialisation du client\n\t\tapiKey := os.Getenv(\"RTMS_API_KEY\")\n\t\tif apiKey == \"\" {\n\t\t\treturn fmt.Errorf(\"la variable d'environnement RTMS_API_KEY n'est pas définie\")\n\t\t}\n\n\t\tvar err error\n\t\tclient, err = api.NewRTMSClient(apiKey, host)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"erreur lors de l'initialisation du client RTMS : %w\", err)\n\t\t}\n\n\t\treturn nil\n\t},\n}\n\nfunc Execute() error {\n\treturn rootCmd.Execute()\n}\n\nfunc init() {\n\trootCmd.PersistentFlags().StringVarP(\u0026cloudTempleID, \"cloud-temple-id\", \"c\", \"\", \"ID Cloud Temple (requis pour la plupart des commandes)\")\n\trootCmd.PersistentFlags().StringVarP(\u0026host, \"host\", \"H\", \"rtms-api.cloud-temple.com\", \"Hôte de l'API RTMS\")\n\trootCmd.PersistentFlags().StringVarP(\u0026outputFormat, \"format\", \"f\", \"json\", \"Format de sortie (json, html, markdown)\")\n\n\trootCmd.PersistentFlags().IntVarP(\u0026limit, \"limit\", \"l\", 0, \"Limite le nombre de résultats retournés (par défaut : 0 pour illimité)\")\n\trootCmd.PersistentFlags().IntVar(\u0026batchSize, \"batch-size\", 100, \"Nombre d'éléments à récupérer par lot (par défaut 100)\")\n\trootCmd.PersistentFlags().StringVar(\u0026filter, \"filter\", \"\", \"Filtre les résultats (format dépendant de la commande)\")\n\n\t// Ajout de la commande version\n\trootCmd.AddCommand(versionCmd)\n}\n\nvar versionCmd = \u0026cobra.Command{\n\tUse:   \"version\",\n\tShort: \"Affiche le numéro de version de RTMS CLI\",\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tfmt.Printf(\"RTMS CLI version %s\\n\", Version)\n\t},\n}\n",
    "size": 2541,
    "modTime": "2024-10-03T23:14:11.9240778+02:00",
    "path": "cmd\\root.go"
  },
  {
    "name": "teams.go",
    "content": "package cmd\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar teamsCmd = \u0026cobra.Command{\n\tUse:   \"teams\",\n\tShort: \"Manage teams\",\n\tLong:  `Manage teams, including listing, creating, updating, and deleting teams.`,\n}\n\nfunc init() {\n\trootCmd.AddCommand(teamsCmd)\n\n\t// Get teams\n\tgetTeamsCmd := \u0026cobra.Command{\n\t\tUse:   \"list\",\n\t\tShort: \"Get a list of Teams\",\n\t}\n\n\tupdateListCommand(getTeamsCmd, \"/teams\", func() map[string]string {\n\t\treturn map[string]string{\n\t\t\t\"cloudTempleId\": cloudTempleID,\n\t\t}\n\t})\n\n\tteamsCmd.AddCommand(getTeamsCmd)\n\n\t// Create team\n\tcreateTeamCmd := \u0026cobra.Command{\n\t\tUse:   \"create\",\n\t\tShort: \"Create a new Team\",\n\t\tRunE:  createTeam,\n\t}\n\tcreateTeamCmd.Flags().String(\"name\", \"\", \"Team name\")\n\tcreateTeamCmd.Flags().String(\"information\", \"\", \"Team information\")\n\tcreateTeamCmd.Flags().StringSlice(\"contacts\", nil, \"Contact email addresses\")\n\tcreateTeamCmd.Flags().IntSlice(\"members\", nil, \"Team member identifiers\")\n\tcreateTeamCmd.MarkFlagRequired(\"name\")\n\tteamsCmd.AddCommand(createTeamCmd)\n\n\t// Get default teams\n\tgetDefaultTeamsCmd := \u0026cobra.Command{\n\t\tUse:   \"defaults\",\n\t\tShort: \"Get a list of all default Teams\",\n\t\tRunE:  getDefaultTeams,\n\t}\n\tteamsCmd.AddCommand(getDefaultTeamsCmd)\n\n\t// Get team details\n\tgetTeamDetailsCmd := \u0026cobra.Command{\n\t\tUse:   \"details [id]\",\n\t\tShort: \"Get Team details\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getTeamDetails,\n\t}\n\tteamsCmd.AddCommand(getTeamDetailsCmd)\n\n\t// Remove team\n\tremoveTeamCmd := \u0026cobra.Command{\n\t\tUse:   \"remove [id]\",\n\t\tShort: \"Remove team\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  removeTeam,\n\t}\n\tteamsCmd.AddCommand(removeTeamCmd)\n\n\t// Edit team\n\teditTeamCmd := \u0026cobra.Command{\n\t\tUse:   \"edit [id]\",\n\t\tShort: \"Edit Team\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  editTeam,\n\t}\n\teditTeamCmd.Flags().String(\"name\", \"\", \"New team name\")\n\teditTeamCmd.Flags().String(\"information\", \"\", \"New information about the team\")\n\teditTeamCmd.Flags().Int(\"tenant\", 0, \"New tenant\")\n\teditTeamCmd.Flags().StringSlice(\"add-contacts\", nil, \"List of emails to add as team contacts\")\n\teditTeamCmd.Flags().StringSlice(\"remove-contacts\", nil, \"List of emails to delete from team contacts\")\n\teditTeamCmd.Flags().IntSlice(\"add-members\", nil, \"List of user identifiers to add as team members\")\n\teditTeamCmd.Flags().IntSlice(\"remove-members\", nil, \"List of user identifiers to remove from team members\")\n\tteamsCmd.AddCommand(editTeamCmd)\n}\n\nfunc createTeam(cmd *cobra.Command, args []string) error {\n\tname, _ := cmd.Flags().GetString(\"name\")\n\tinformation, _ := cmd.Flags().GetString(\"information\")\n\tcontacts, _ := cmd.Flags().GetStringSlice(\"contacts\")\n\tmembers, _ := cmd.Flags().GetIntSlice(\"members\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tteamData := map[string]interface{}{\n\t\t\"name\": name,\n\t}\n\tif information != \"\" {\n\t\tteamData[\"information\"] = information\n\t}\n\tif len(contacts) \u003e 0 {\n\t\tteamData[\"contacts\"] = contacts\n\t}\n\tif len(members) \u003e 0 {\n\t\tteamData[\"members\"] = members\n\t}\n\n\tresponse, err := client.CreateTeam(cloudTempleID, teamData)\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getDefaultTeams(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetDefaultTeams(nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getTeamDetails(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetTeamDetails(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc removeTeam(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.RemoveTeam(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc editTeam(cmd *cobra.Command, args []string) error {\n\tname, _ := cmd.Flags().GetString(\"name\")\n\tinformation, _ := cmd.Flags().GetString(\"information\")\n\ttenant, _ := cmd.Flags().GetInt(\"tenant\")\n\taddContacts, _ := cmd.Flags().GetStringSlice(\"add-contacts\")\n\tremoveContacts, _ := cmd.Flags().GetStringSlice(\"remove-contacts\")\n\taddMembers, _ := cmd.Flags().GetIntSlice(\"add-members\")\n\tremoveMembers, _ := cmd.Flags().GetIntSlice(\"remove-members\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tteamData := make(map[string]interface{})\n\tif name != \"\" {\n\t\tteamData[\"name\"] = name\n\t}\n\tif information != \"\" {\n\t\tteamData[\"information\"] = information\n\t}\n\tif tenant != 0 {\n\t\tteamData[\"tenant\"] = tenant\n\t}\n\tif len(addContacts) \u003e 0 {\n\t\tteamData[\"addContacts\"] = addContacts\n\t}\n\tif len(removeContacts) \u003e 0 {\n\t\tteamData[\"removeContacts\"] = removeContacts\n\t}\n\tif len(addMembers) \u003e 0 {\n\t\tteamData[\"addMembers\"] = addMembers\n\t}\n\tif len(removeMembers) \u003e 0 {\n\t\tteamData[\"removeMembers\"] = removeMembers\n\t}\n\n\tresponse, err := client.EditTeam(args[0], teamData)\n\tif err != nil {\n\t\treturn err\n\t}\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n",
    "size": 5348,
    "modTime": "2024-10-03T21:24:40.4320527+02:00",
    "path": "cmd\\teams.go"
  },
  {
    "name": "tenants.go",
    "content": "package cmd\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar tenantsCmd = \u0026cobra.Command{\n\tUse:   \"tenants\",\n\tShort: \"Manage tenants\",\n\tLong:  `Manage tenants, including listing, creating, and managing tenant details, SSH keys, and workflow emails.`,\n}\n\nfunc init() {\n\trootCmd.AddCommand(tenantsCmd)\n\n\t// Get tenants\n\tgetTenantsCmd := \u0026cobra.Command{\n\t\tUse:   \"list\",\n\t\tShort: \"Get a list of Tenants\",\n\t}\n\tgetTenantsCmd.Flags().String(\"name\", \"\", \"Filter tenants by name\")\n\tgetTenantsCmd.Flags().Int(\"responsible-team-id\", 0, \"Filter tenants by responsible team ID\")\n\tgetTenantsCmd.Flags().Int(\"sdm-id\", 0, \"Filter tenants by SDM ID\")\n\n\tupdateListCommand(getTenantsCmd, \"/tenants\", func() map[string]string {\n\t\tparams := make(map[string]string)\n\n\t\tname, _ := getTenantsCmd.Flags().GetString(\"name\")\n\t\tif name != \"\" {\n\t\t\tparams[\"name\"] = name\n\t\t}\n\n\t\tresponsibleTeamID, _ := getTenantsCmd.Flags().GetInt(\"responsible-team-id\")\n\t\tif responsibleTeamID != 0 {\n\t\t\tparams[\"responsibleTeamId\"] = fmt.Sprintf(\"%d\", responsibleTeamID)\n\t\t}\n\n\t\tsdmID, _ := getTenantsCmd.Flags().GetInt(\"sdm-id\")\n\t\tif sdmID != 0 {\n\t\t\tparams[\"sdmId\"] = fmt.Sprintf(\"%d\", sdmID)\n\t\t}\n\n\t\treturn params\n\t})\n\n\ttenantsCmd.AddCommand(getTenantsCmd)\n\n\t// Create tenant\n\tcreateTenantCmd := \u0026cobra.Command{\n\t\tUse:   \"create\",\n\t\tShort: \"Create a new Tenant\",\n\t\tRunE:  createTenant,\n\t}\n\tcreateTenantCmd.Flags().String(\"name\", \"\", \"Tenant's name\")\n\tcreateTenantCmd.Flags().String(\"phone\", \"\", \"Tenant's phone\")\n\tcreateTenantCmd.Flags().String(\"address\", \"\", \"Tenant's address\")\n\tcreateTenantCmd.Flags().String(\"postal-code\", \"\", \"Tenant's postal code\")\n\tcreateTenantCmd.Flags().String(\"city\", \"\", \"Tenant's city\")\n\tcreateTenantCmd.Flags().String(\"country\", \"\", \"Tenant's country\")\n\tcreateTenantCmd.Flags().Int(\"responsible-team\", 0, \"Tenant's responsible team ID\")\n\tcreateTenantCmd.Flags().Int(\"contact\", 0, \"Tenant's contact ID\")\n\tcreateTenantCmd.Flags().StringSlice(\"watchers\", nil, \"List of default watcher email addresses\")\n\tcreateTenantCmd.Flags().Bool(\"is-enabled\", true, \"Is Tenant active?\")\n\tcreateTenantCmd.Flags().String(\"cloud-temple-id\", \"\", \"MySI Tenant's identifier\")\n\tcreateTenantCmd.MarkFlagRequired(\"name\")\n\tcreateTenantCmd.MarkFlagRequired(\"phone\")\n\tcreateTenantCmd.MarkFlagRequired(\"address\")\n\tcreateTenantCmd.MarkFlagRequired(\"postal-code\")\n\tcreateTenantCmd.MarkFlagRequired(\"city\")\n\tcreateTenantCmd.MarkFlagRequired(\"country\")\n\tcreateTenantCmd.MarkFlagRequired(\"responsible-team\")\n\tcreateTenantCmd.MarkFlagRequired(\"contact\")\n\ttenantsCmd.AddCommand(createTenantCmd)\n\n\t// Get tenant details\n\tgetTenantDetailsCmd := \u0026cobra.Command{\n\t\tUse:   \"details [id]\",\n\t\tShort: \"Get Tenant details\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getTenantDetails,\n\t}\n\ttenantsCmd.AddCommand(getTenantDetailsCmd)\n\n\t// Get tenant contacts\n\tgetTenantContactsCmd := \u0026cobra.Command{\n\t\tUse:   \"contacts [id]\",\n\t\tShort: \"Get Tenant contacts\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getTenantContacts,\n\t}\n\ttenantsCmd.AddCommand(getTenantContactsCmd)\n\n\t// Request tenant deletion\n\trequestTenantDeletionCmd := \u0026cobra.Command{\n\t\tUse:   \"request-deletion [id]\",\n\t\tShort: \"Request tenant deletion\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  requestTenantDeletion,\n\t}\n\trequestTenantDeletionCmd.Flags().Bool(\"delete\", false, \"Enable or disable deletion request\")\n\trequestTenantDeletionCmd.MarkFlagRequired(\"delete\")\n\ttenantsCmd.AddCommand(requestTenantDeletionCmd)\n\n\t// SSH Keys subcommand\n\tsshKeysCmd := \u0026cobra.Command{\n\t\tUse:   \"ssh-keys\",\n\t\tShort: \"Manage tenant SSH keys\",\n\t}\n\ttenantsCmd.AddCommand(sshKeysCmd)\n\n\t// List SSH keys\n\tlistSSHKeysCmd := \u0026cobra.Command{\n\t\tUse:   \"list [tenant-id]\",\n\t\tShort: \"List all SSH keys of a tenant\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  listTenantSSHKeys,\n\t}\n\tsshKeysCmd.AddCommand(listSSHKeysCmd)\n\n\t// Generate SSH key\n\tgenerateSSHKeyCmd := \u0026cobra.Command{\n\t\tUse:   \"generate [tenant-id]\",\n\t\tShort: \"Generate a new SSH key for a tenant\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  generateTenantSSHKey,\n\t}\n\tgenerateSSHKeyCmd.Flags().String(\"comment\", \"\", \"Free comment\")\n\tgenerateSSHKeyCmd.Flags().Bool(\"is-active\", false, \"Key state\")\n\tsshKeysCmd.AddCommand(generateSSHKeyCmd)\n\n\t// Delete SSH key\n\tdeleteSSHKeyCmd := \u0026cobra.Command{\n\t\tUse:   \"delete [key-id]\",\n\t\tShort: \"Delete an SSH key of a tenant\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  deleteTenantSSHKey,\n\t}\n\tsshKeysCmd.AddCommand(deleteSSHKeyCmd)\n\n\t// Update SSH key\n\tupdateSSHKeyCmd := \u0026cobra.Command{\n\t\tUse:   \"update [key-id]\",\n\t\tShort: \"Update an SSH key\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  updateTenantSSHKey,\n\t}\n\tupdateSSHKeyCmd.Flags().Bool(\"is-active\", false, \"Key state\")\n\tsshKeysCmd.AddCommand(updateSSHKeyCmd)\n\n\t// Workflow Emails subcommand\n\tworkflowEmailsCmd := \u0026cobra.Command{\n\t\tUse:   \"workflow-emails\",\n\t\tShort: \"Manage tenant workflow emails\",\n\t}\n\ttenantsCmd.AddCommand(workflowEmailsCmd)\n\n\t// Get workflow emails details\n\tgetWorkflowEmailsCmd := \u0026cobra.Command{\n\t\tUse:   \"get [tenant-id]\",\n\t\tShort: \"Get workflow emails details\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getTenantWorkflowEmails,\n\t}\n\tworkflowEmailsCmd.AddCommand(getWorkflowEmailsCmd)\n\n\t// Edit workflow emails generalities\n\teditWorkflowEmailsGeneralitiesCmd := \u0026cobra.Command{\n\t\tUse:   \"edit-generalities [tenant-id]\",\n\t\tShort: \"Edit workflow emails generalities\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  editTenantWorkflowEmailsGeneralities,\n\t}\n\teditWorkflowEmailsGeneralitiesCmd.Flags().String(\"format\", \"\", \"Format of emails sent (HTML or TEXT)\")\n\teditWorkflowEmailsGeneralitiesCmd.Flags().String(\"from\", \"\", \"Email address used to send emails\")\n\tworkflowEmailsCmd.AddCommand(editWorkflowEmailsGeneralitiesCmd)\n\n\t// Edit workflow emails create ticket\n\teditWorkflowEmailsCreateTicketCmd := \u0026cobra.Command{\n\t\tUse:   \"edit-create-ticket [tenant-id]\",\n\t\tShort: \"Edit workflow emails create ticket\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  editTenantWorkflowEmailsCreateTicket,\n\t}\n\tworkflowEmailsCmd.AddCommand(editWorkflowEmailsCreateTicketCmd)\n\n\t// Edit workflow emails update ticket\n\teditWorkflowEmailsUpdateTicketCmd := \u0026cobra.Command{\n\t\tUse:   \"edit-update-ticket [tenant-id]\",\n\t\tShort: \"Edit workflow emails update ticket\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  editTenantWorkflowEmailsUpdateTicket,\n\t}\n\tworkflowEmailsCmd.AddCommand(editWorkflowEmailsUpdateTicketCmd)\n\n\t// Edit workflow emails validation client ticket\n\teditWorkflowEmailsValidationClientTicketCmd := \u0026cobra.Command{\n\t\tUse:   \"edit-validation-client-ticket [tenant-id]\",\n\t\tShort: \"Edit workflow emails validation client ticket\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  editTenantWorkflowEmailsValidationClientTicket,\n\t}\n\tworkflowEmailsCmd.AddCommand(editWorkflowEmailsValidationClientTicketCmd)\n\n\t// Edit workflow emails close ticket\n\teditWorkflowEmailsCloseTicketCmd := \u0026cobra.Command{\n\t\tUse:   \"edit-close-ticket [tenant-id]\",\n\t\tShort: \"Edit workflow emails close ticket\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  editTenantWorkflowEmailsCloseTicket,\n\t}\n\tworkflowEmailsCmd.AddCommand(editWorkflowEmailsCloseTicketCmd)\n}\n\nfunc getTenants(cmd *cobra.Command, args []string) error {\n\tname, _ := cmd.Flags().GetString(\"name\")\n\tresponsibleTeamID, _ := cmd.Flags().GetInt(\"responsible-team-id\")\n\tsdmID, _ := cmd.Flags().GetInt(\"sdm-id\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tparams := make(map[string]string)\n\tif name != \"\" {\n\t\tparams[\"name\"] = name\n\t}\n\tif responsibleTeamID != 0 {\n\t\tparams[\"responsibleTeamId\"] = fmt.Sprintf(\"%d\", responsibleTeamID)\n\t}\n\tif sdmID != 0 {\n\t\tparams[\"sdmId\"] = fmt.Sprintf(\"%d\", sdmID)\n\t}\n\n\tresponse, err := client.GetTenants(params)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc createTenant(cmd *cobra.Command, args []string) error {\n\tname, _ := cmd.Flags().GetString(\"name\")\n\tphone, _ := cmd.Flags().GetString(\"phone\")\n\taddress, _ := cmd.Flags().GetString(\"address\")\n\tpostalCode, _ := cmd.Flags().GetString(\"postal-code\")\n\tcity, _ := cmd.Flags().GetString(\"city\")\n\tcountry, _ := cmd.Flags().GetString(\"country\")\n\tresponsibleTeam, _ := cmd.Flags().GetInt(\"responsible-team\")\n\tcontact, _ := cmd.Flags().GetInt(\"contact\")\n\twatchers, _ := cmd.Flags().GetStringSlice(\"watchers\")\n\tisEnabled, _ := cmd.Flags().GetBool(\"is-enabled\")\n\tcloudTempleID, _ := cmd.Flags().GetString(\"cloud-temple-id\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\ttenantData := map[string]interface{}{\n\t\t\"name\":            name,\n\t\t\"phone\":           phone,\n\t\t\"address\":         address,\n\t\t\"postalCode\":      postalCode,\n\t\t\"city\":            city,\n\t\t\"country\":         country,\n\t\t\"responsibleTeam\": responsibleTeam,\n\t\t\"contact\":         contact,\n\t\t\"watchers\":        watchers,\n\t\t\"isEnabled\":       isEnabled,\n\t\t\"cloudTempleId\":   cloudTempleID,\n\t}\n\n\tresponse, err := client.CreateTenant(tenantData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getTenantDetails(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetTenantDetails(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getTenantContacts(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetTenantContacts(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc requestTenantDeletion(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tdelete, _ := cmd.Flags().GetBool(\"delete\")\n\tresponse, err := client.RequestTenantDeletion(args[0], delete)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc listTenantSSHKeys(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetTenantSSHKeys(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc generateTenantSSHKey(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tcomment, _ := cmd.Flags().GetString(\"comment\")\n\tisActive, _ := cmd.Flags().GetBool(\"is-active\")\n\n\tkeyData := map[string]interface{}{\n\t\t\"comment\":  comment,\n\t\t\"isActive\": isActive,\n\t}\n\n\tresponse, err := client.GenerateTenantSSHKey(args[0], keyData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc deleteTenantSSHKey(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.DeleteTenantSSHKey(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc updateTenantSSHKey(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tisActive, _ := cmd.Flags().GetBool(\"is-active\")\n\n\tkeyData := map[string]interface{}{\n\t\t\"isActive\": isActive,\n\t}\n\n\tresponse, err := client.UpdateTenantSSHKey(args[0], keyData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getTenantWorkflowEmails(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetTenantWorkflowEmails(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc editTenantWorkflowEmailsGeneralities(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tfrom, _ := cmd.Flags().GetString(\"from\")\n\n\tdata := map[string]interface{}{\n\t\t\"format\": format,\n\t\t\"from\":   from,\n\t}\n\n\tresponse, err := client.EditTenantWorkflowEmailsGeneralities(args[0], data)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc editTenantWorkflowEmailsCreateTicket(cmd *cobra.Command, args []string) error {\n\t// Add necessary flags and implement the function\n\treturn fmt.Errorf(\"Not implemented\")\n}\n\nfunc editTenantWorkflowEmailsUpdateTicket(cmd *cobra.Command, args []string) error {\n\t// Add necessary flags and implement the function\n\treturn fmt.Errorf(\"Not implemented\")\n}\n\nfunc editTenantWorkflowEmailsValidationClientTicket(cmd *cobra.Command, args []string) error {\n\t// Add necessary flags and implement the function\n\treturn fmt.Errorf(\"Not implemented\")\n}\n\nfunc editTenantWorkflowEmailsCloseTicket(cmd *cobra.Command, args []string) error {\n\t// Add necessary flags and implement the function\n\treturn fmt.Errorf(\"Not implemented\")\n}\n",
    "size": 14310,
    "modTime": "2024-10-03T21:32:57.1613302+02:00",
    "path": "cmd\\tenants.go"
  },
  {
    "name": "tickets.go",
    "content": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strconv\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar ticketsCmd = \u0026cobra.Command{\n\tUse:   \"tickets\",\n\tShort: \"Manage tickets\",\n\tLong:  `Manage tickets, including listing, creating, editing, and viewing ticket details and statistics.`,\n}\n\nfunc init() {\n\trootCmd.AddCommand(ticketsCmd)\n\n\t// Get tickets\n\tgetTicketsCmd := \u0026cobra.Command{\n\t\tUse:   \"list\",\n\t\tShort: \"Get a list of Tickets\",\n\t}\n\tgetTicketsCmd.Flags().String(\"name\", \"\", \"Filter tickets by subject (name)\")\n\tgetTicketsCmd.Flags().IntSlice(\"status\", nil, \"Filter Tickets by one or more status (0-6)\")\n\tgetTicketsCmd.Flags().String(\"owner\", \"\", \"Filter tickets by owner name\")\n\tgetTicketsCmd.Flags().IntSlice(\"owner-ids\", nil, \"Filter tickets by one or more owner RTMS identifiers\")\n\tgetTicketsCmd.Flags().Bool(\"is-not-assigned\", false, \"Filter non assigned tickets\")\n\tgetTicketsCmd.Flags().Bool(\"is-on-delegation\", false, \"Filter tickets on delegation\")\n\n\tupdateListCommand(getTicketsCmd, \"/tickets\", func() map[string]string {\n\t\tparams := make(map[string]string)\n\t\tparams[\"cloudTempleId\"] = cloudTempleID\n\n\t\tname, _ := getTicketsCmd.Flags().GetString(\"name\")\n\t\tif name != \"\" {\n\t\t\tparams[\"name\"] = name\n\t\t}\n\n\t\tstatus, _ := getTicketsCmd.Flags().GetIntSlice(\"status\")\n\t\tif len(status) \u003e 0 {\n\t\t\tparams[\"status[]\"] = intSliceToString(status)\n\t\t}\n\n\t\towner, _ := getTicketsCmd.Flags().GetString(\"owner\")\n\t\tif owner != \"\" {\n\t\t\tparams[\"owner\"] = owner\n\t\t}\n\n\t\townerIDs, _ := getTicketsCmd.Flags().GetIntSlice(\"owner-ids\")\n\t\tif len(ownerIDs) \u003e 0 {\n\t\t\tparams[\"ownerIds[]\"] = intSliceToString(ownerIDs)\n\t\t}\n\n\t\tisNotAssigned, _ := getTicketsCmd.Flags().GetBool(\"is-not-assigned\")\n\t\tif isNotAssigned {\n\t\t\tparams[\"isNotAssigned\"] = \"true\"\n\t\t}\n\n\t\tisOnDelegation, _ := getTicketsCmd.Flags().GetBool(\"is-on-delegation\")\n\t\tif isOnDelegation {\n\t\t\tparams[\"isOnDelegation\"] = \"true\"\n\t\t}\n\n\t\treturn params\n\t})\n\n\tticketsCmd.AddCommand(getTicketsCmd)\n\n\t// Create ticket\n\tcreateTicketCmd := \u0026cobra.Command{\n\t\tUse:   \"create\",\n\t\tShort: \"Create a new Ticket\",\n\t\tRunE:  createTicket,\n\t}\n\tcreateTicketCmd.Flags().String(\"name\", \"\", \"A title, the issue in short\")\n\tcreateTicketCmd.Flags().String(\"description\", \"\", \"Detailed description of the issue\")\n\tcreateTicketCmd.Flags().Int(\"owner\", 0, \"Identifier of the user in charge of solving the issue\")\n\tcreateTicketCmd.Flags().IntSlice(\"catalog-items\", nil, \"Collection of classification catalog item identifiers\")\n\tcreateTicketCmd.MarkFlagRequired(\"name\")\n\tcreateTicketCmd.MarkFlagRequired(\"description\")\n\tticketsCmd.AddCommand(createTicketCmd)\n\n\t// Get tickets count\n\tgetTicketsCountCmd := \u0026cobra.Command{\n\t\tUse:   \"count\",\n\t\tShort: \"Get number of Tickets\",\n\t\tRunE:  getTicketsCount,\n\t}\n\tgetTicketsCountCmd.Flags().Int(\"status\", -1, \"Filter Tickets by status (0-6)\")\n\tticketsCmd.AddCommand(getTicketsCountCmd)\n\n\t// Get ticket details\n\tgetTicketDetailsCmd := \u0026cobra.Command{\n\t\tUse:   \"details [id]\",\n\t\tShort: \"Get Ticket details\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getTicketDetails,\n\t}\n\tticketsCmd.AddCommand(getTicketDetailsCmd)\n\n\t// Edit ticket\n\teditTicketCmd := \u0026cobra.Command{\n\t\tUse:   \"edit [id]\",\n\t\tShort: \"Edit Ticket information\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  editTicket,\n\t}\n\teditTicketCmd.Flags().String(\"name\", \"\", \"A new title, the issue in short\")\n\teditTicketCmd.Flags().String(\"description\", \"\", \"A new detailed description of the issue\")\n\teditTicketCmd.Flags().Int(\"owner\", 0, \"New identifier of the user in charge of solving the issue\")\n\teditTicketCmd.Flags().IntSlice(\"catalog-items\", nil, \"New collection of classification catalog item identifiers\")\n\tticketsCmd.AddCommand(editTicketCmd)\n\n\t// Get ticket catalogs\n\tgetTicketCatalogsCmd := \u0026cobra.Command{\n\t\tUse:   \"catalogs [id]\",\n\t\tShort: \"Get Ticket catalogs\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getTicketCatalogs,\n\t}\n\tgetTicketCatalogsCmd.Flags().Bool(\"selected-item\", false, \"Show classification catalog with selected items for this ticket\")\n\tgetTicketCatalogsCmd.Flags().Bool(\"available-items\", false, \"Show classification catalog with all available items for this ticket\")\n\tgetTicketCatalogsCmd.Flags().Bool(\"is-root\", false, \"If true, only classification root catalogs will be displayed\")\n\tticketsCmd.AddCommand(getTicketCatalogsCmd)\n\n\t// Get tickets stats\n\tgetTicketsStatsCmd := \u0026cobra.Command{\n\t\tUse:   \"stats\",\n\t\tShort: \"Get tickets status stats\",\n\t\tRunE:  getTicketsStats,\n\t}\n\tticketsCmd.AddCommand(getTicketsStatsCmd)\n\n\t// Attachments subcommand\n\tattachmentsCmd := \u0026cobra.Command{\n\t\tUse:   \"attachments\",\n\t\tShort: \"Manage ticket attachments\",\n\t}\n\tticketsCmd.AddCommand(attachmentsCmd)\n\n\t// List attachments\n\tlistAttachmentsCmd := \u0026cobra.Command{\n\t\tUse:   \"list [ticket-id]\",\n\t\tShort: \"List ticket attachments\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  listTicketAttachments,\n\t}\n\tattachmentsCmd.AddCommand(listAttachmentsCmd)\n\n\t// Upload attachment\n\tuploadAttachmentCmd := \u0026cobra.Command{\n\t\tUse:   \"upload [ticket-id] [file-path]\",\n\t\tShort: \"Upload a ticket attachment\",\n\t\tArgs:  cobra.ExactArgs(2),\n\t\tRunE:  uploadTicketAttachment,\n\t}\n\tattachmentsCmd.AddCommand(uploadAttachmentCmd)\n\n\t// Download attachment\n\tdownloadAttachmentCmd := \u0026cobra.Command{\n\t\tUse:   \"download [attachment-id] [output-path]\",\n\t\tShort: \"Download a ticket attachment\",\n\t\tArgs:  cobra.ExactArgs(2),\n\t\tRunE:  downloadTicketAttachment,\n\t}\n\tattachmentsCmd.AddCommand(downloadAttachmentCmd)\n\n\t// Remove attachment\n\tremoveAttachmentCmd := \u0026cobra.Command{\n\t\tUse:   \"remove [attachment-id]\",\n\t\tShort: \"Remove a ticket attachment\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  removeTicketAttachment,\n\t}\n\tattachmentsCmd.AddCommand(removeAttachmentCmd)\n\n\t// Comments subcommand\n\tcommentsCmd := \u0026cobra.Command{\n\t\tUse:   \"comments\",\n\t\tShort: \"Manage ticket comments\",\n\t}\n\tticketsCmd.AddCommand(commentsCmd)\n\n\t// List all comments\n\tlistAllCommentsCmd := \u0026cobra.Command{\n\t\tUse:   \"list-all\",\n\t\tShort: \"Get all Ticket comments\",\n\t\tRunE:  listAllTicketComments,\n\t}\n\tlistAllCommentsCmd.Flags().Int(\"ticket\", 0, \"Filter by ticket ID\")\n\tlistAllCommentsCmd.Flags().Int(\"user\", 0, \"Filter by user ID\")\n\tcommentsCmd.AddCommand(listAllCommentsCmd)\n\n\t// List comments for a specific ticket\n\tlistTicketCommentsCmd := \u0026cobra.Command{\n\t\tUse:   \"list [ticket-id]\",\n\t\tShort: \"Get Ticket comments by ticket\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  listTicketComments,\n\t}\n\tcommentsCmd.AddCommand(listTicketCommentsCmd)\n\n\t// Post comment\n\tpostCommentCmd := \u0026cobra.Command{\n\t\tUse:   \"post [ticket-id]\",\n\t\tShort: \"Post Ticket comment\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  postTicketComment,\n\t}\n\tpostCommentCmd.Flags().String(\"content\", \"\", \"Comment content\")\n\tpostCommentCmd.Flags().Bool(\"private\", false, \"Comment privacy\")\n\tpostCommentCmd.Flags().Int(\"duration\", 0, \"Working time on the Ticket\")\n\tpostCommentCmd.MarkFlagRequired(\"content\")\n\tcommentsCmd.AddCommand(postCommentCmd)\n\n\t// Edit comment\n\teditCommentCmd := \u0026cobra.Command{\n\t\tUse:   \"edit [comment-id]\",\n\t\tShort: \"Edit Ticket comment\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  editTicketComment,\n\t}\n\teditCommentCmd.Flags().String(\"content\", \"\", \"Comment content\")\n\teditCommentCmd.Flags().Bool(\"private\", false, \"Comment privacy\")\n\teditCommentCmd.Flags().Int(\"duration\", 0, \"Working time on the Ticket\")\n\tcommentsCmd.AddCommand(editCommentCmd)\n\n\t// Tags subcommand\n\ttagsCmd := \u0026cobra.Command{\n\t\tUse:   \"tags\",\n\t\tShort: \"Manage ticket tags\",\n\t}\n\tticketsCmd.AddCommand(tagsCmd)\n\n\t// List tags\n\tlistTagsCmd := \u0026cobra.Command{\n\t\tUse:   \"list\",\n\t\tShort: \"Get a list of ticket tags\",\n\t\tRunE:  listTicketTags,\n\t}\n\tlistTagsCmd.Flags().String(\"label\", \"\", \"Filter by label\")\n\ttagsCmd.AddCommand(listTagsCmd)\n\n\t// Create tag\n\tcreateTagCmd := \u0026cobra.Command{\n\t\tUse:   \"create\",\n\t\tShort: \"Create a ticket tag\",\n\t\tRunE:  createTicketTag,\n\t}\n\tcreateTagCmd.Flags().String(\"label\", \"\", \"Tag label\")\n\tcreateTagCmd.Flags().String(\"description\", \"\", \"Tag description\")\n\tcreateTagCmd.Flags().IntSlice(\"tickets\", nil, \"List of ticket IDs to associate with the tag\")\n\tcreateTagCmd.MarkFlagRequired(\"label\")\n\ttagsCmd.AddCommand(createTagCmd)\n\n\t// Get tag details\n\tgetTagDetailsCmd := \u0026cobra.Command{\n\t\tUse:   \"details [id]\",\n\t\tShort: \"Get details of a tag\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getTicketTagDetails,\n\t}\n\ttagsCmd.AddCommand(getTagDetailsCmd)\n\n\t// Remove tag\n\tremoveTagCmd := \u0026cobra.Command{\n\t\tUse:   \"remove [id]\",\n\t\tShort: \"Remove a ticket tag\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  removeTicketTag,\n\t}\n\ttagsCmd.AddCommand(removeTagCmd)\n\n\t// Edit tag\n\teditTagCmd := \u0026cobra.Command{\n\t\tUse:   \"edit [id]\",\n\t\tShort: \"Edit ticket tag\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  editTicketTag,\n\t}\n\teditTagCmd.Flags().String(\"label\", \"\", \"Tag label\")\n\teditTagCmd.Flags().String(\"description\", \"\", \"Tag description\")\n\teditTagCmd.Flags().IntSlice(\"tickets\", nil, \"List of ticket IDs to associate with the tag\")\n\ttagsCmd.AddCommand(editTagCmd)\n\n\t// Get tickets by tag\n\tgetTicketsByTagCmd := \u0026cobra.Command{\n\t\tUse:   \"tickets [id]\",\n\t\tShort: \"Gets tickets that match a given tag\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getTicketsByTag,\n\t}\n\ttagsCmd.AddCommand(getTicketsByTagCmd)\n\n}\n\nfunc getTickets(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tname, _ := cmd.Flags().GetString(\"name\")\n\tstatus, _ := cmd.Flags().GetIntSlice(\"status\")\n\towner, _ := cmd.Flags().GetString(\"owner\")\n\townerIDs, _ := cmd.Flags().GetIntSlice(\"owner-ids\")\n\tisNotAssigned, _ := cmd.Flags().GetBool(\"is-not-assigned\")\n\tisOnDelegation, _ := cmd.Flags().GetBool(\"is-on-delegation\")\n\n\tparams := make(map[string]string)\n\tparams[\"cloudTempleId\"] = cloudTempleID\n\tif name != \"\" {\n\t\tparams[\"name\"] = name\n\t}\n\tif len(status) \u003e 0 {\n\t\tparams[\"status[]\"] = intSliceToString(status)\n\t}\n\tif owner != \"\" {\n\t\tparams[\"owner\"] = owner\n\t}\n\tif len(ownerIDs) \u003e 0 {\n\t\tparams[\"ownerIds[]\"] = intSliceToString(ownerIDs)\n\t}\n\tif isNotAssigned {\n\t\tparams[\"isNotAssigned\"] = \"true\"\n\t}\n\tif isOnDelegation {\n\t\tparams[\"isOnDelegation\"] = \"true\"\n\t}\n\n\tdataChan, errChan := client.StreamData(\"/tickets\", params, batchSize)\n\n\tvar tickets []interface{}\n\tvar processingError error\n\n\tfor {\n\t\tselect {\n\t\tcase item, ok := \u003c-dataChan:\n\t\t\tif !ok {\n\t\t\t\t// Le canal de données est fermé, arrêtez le traitement\n\t\t\t\tgoto ProcessingComplete\n\t\t\t}\n\t\t\ttickets = append(tickets, item)\n\t\tcase err, ok := \u003c-errChan:\n\t\t\tif !ok {\n\t\t\t\t// Le canal d'erreurs est fermé, continuez le traitement\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// Une erreur s'est produite, arrêtez le traitement\n\t\t\tprocessingError = fmt.Errorf(\"erreur lors de la récupération des tickets : %w\", err)\n\t\t\tgoto ProcessingComplete\n\t\t}\n\t}\n\nProcessingComplete:\n\tif processingError != nil {\n\t\treturn processingError\n\t}\n\n\t// Formatage de la sortie\n\toutput, err := formatOutput(tickets, format)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"erreur lors du formatage de la sortie des tickets : %w\", err)\n\t}\n\n\t// Affichage de la sortie\n\tfmt.Fprintln(os.Stdout, output)\n\n\treturn nil\n}\n\nfunc createTicket(cmd *cobra.Command, args []string) error {\n\tname, _ := cmd.Flags().GetString(\"name\")\n\tdescription, _ := cmd.Flags().GetString(\"description\")\n\towner, _ := cmd.Flags().GetInt(\"owner\")\n\tcatalogItems, _ := cmd.Flags().GetIntSlice(\"catalog-items\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tticketData := map[string]interface{}{\n\t\t\"name\":        name,\n\t\t\"description\": description,\n\t}\n\tif owner != 0 {\n\t\tticketData[\"owner\"] = owner\n\t}\n\tif len(catalogItems) \u003e 0 {\n\t\tticketData[\"catalogItemsCollection\"] = catalogItems\n\t}\n\n\tresponse, err := client.CreateTicket(cloudTempleID, ticketData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getTicketsCount(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tstatus, _ := cmd.Flags().GetInt(\"status\")\n\tresponse, err := client.GetTicketsCount(cloudTempleID, status)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getTicketDetails(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetTicketDetails(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc editTicket(cmd *cobra.Command, args []string) error {\n\tname, _ := cmd.Flags().GetString(\"name\")\n\tdescription, _ := cmd.Flags().GetString(\"description\")\n\towner, _ := cmd.Flags().GetInt(\"owner\")\n\tcatalogItems, _ := cmd.Flags().GetIntSlice(\"catalog-items\")\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\n\tticketData := make(map[string]interface{})\n\tif name != \"\" {\n\t\tticketData[\"name\"] = name\n\t}\n\tif description != \"\" {\n\t\tticketData[\"description\"] = description\n\t}\n\tif owner != 0 {\n\t\tticketData[\"owner\"] = owner\n\t}\n\tif len(catalogItems) \u003e 0 {\n\t\tticketData[\"catalogItemsCollection\"] = catalogItems\n\t}\n\n\tresponse, err := client.EditTicket(args[0], ticketData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getTicketCatalogs(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tselectedItem, _ := cmd.Flags().GetBool(\"selected-item\")\n\tavailableItems, _ := cmd.Flags().GetBool(\"available-items\")\n\tisRoot, _ := cmd.Flags().GetBool(\"is-root\")\n\n\tparams := make(map[string]string)\n\tif selectedItem {\n\t\tparams[\"selectedItem\"] = \"true\"\n\t}\n\tif availableItems {\n\t\tparams[\"availableItems\"] = \"true\"\n\t}\n\tif isRoot {\n\t\tparams[\"isRoot\"] = \"true\"\n\t}\n\n\tresponse, err := client.GetTicketCatalogs(args[0], params)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getTicketsStats(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetTicketsStats(cloudTempleID)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc listTicketAttachments(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.ListTicketAttachments(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc uploadTicketAttachment(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tticketID := args[0]\n\tfilePath := args[1]\n\n\tcontent, err := ioutil.ReadFile(filePath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to read file: %v\", err)\n\t}\n\n\tfilename := filepath.Base(filePath)\n\tresponse, err := client.UploadTicketAttachment(ticketID, filename, content)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc downloadTicketAttachment(cmd *cobra.Command, args []string) error {\n\tattachmentID := args[0]\n\toutputPath := args[1]\n\n\tresponse, err := client.DownloadTicketAttachment(attachmentID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = ioutil.WriteFile(outputPath, response, 0644)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to write file: %v\", err)\n\t}\n\n\tfmt.Printf(\"Attachment downloaded successfully to %s\\n\", outputPath)\n\treturn nil\n}\n\nfunc removeTicketAttachment(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.RemoveTicketAttachment(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc listAllTicketComments(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tticketID, _ := cmd.Flags().GetInt(\"ticket\")\n\tuserID, _ := cmd.Flags().GetInt(\"user\")\n\n\tparams := make(map[string]string)\n\tif ticketID != 0 {\n\t\tparams[\"ticket\"] = strconv.Itoa(ticketID)\n\t}\n\tif userID != 0 {\n\t\tparams[\"user\"] = strconv.Itoa(userID)\n\t}\n\n\tresponse, err := client.GetTicketComments(cloudTempleID, params)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc listTicketComments(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tticketID := args[0]\n\tresponse, err := client.GetTicketCommentsByTicket(ticketID, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc postTicketComment(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tticketID := args[0]\n\tcontent, _ := cmd.Flags().GetString(\"content\")\n\tprivate, _ := cmd.Flags().GetBool(\"private\")\n\tduration, _ := cmd.Flags().GetInt(\"duration\")\n\n\tcommentData := map[string]interface{}{\n\t\t\"content\": content,\n\t\t\"private\": private,\n\t}\n\tif duration != 0 {\n\t\tcommentData[\"duration\"] = duration\n\t}\n\n\tresponse, err := client.PostTicketComment(ticketID, commentData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc editTicketComment(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tcommentID := args[0]\n\tcontent, _ := cmd.Flags().GetString(\"content\")\n\tprivate, _ := cmd.Flags().GetBool(\"private\")\n\tduration, _ := cmd.Flags().GetInt(\"duration\")\n\n\tcommentData := make(map[string]interface{})\n\tif content != \"\" {\n\t\tcommentData[\"content\"] = content\n\t}\n\tif cmd.Flags().Changed(\"private\") {\n\t\tcommentData[\"private\"] = private\n\t}\n\tif duration != 0 {\n\t\tcommentData[\"duration\"] = duration\n\t}\n\n\tresponse, err := client.EditTicketComment(commentID, commentData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc listTicketTags(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tlabel, _ := cmd.Flags().GetString(\"label\")\n\tparams := make(map[string]string)\n\tif label != \"\" {\n\t\tparams[\"label\"] = label\n\t}\n\tresponse, err := client.GetTicketTags(cloudTempleID, params)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc createTicketTag(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tlabel, _ := cmd.Flags().GetString(\"label\")\n\tdescription, _ := cmd.Flags().GetString(\"description\")\n\ttickets, _ := cmd.Flags().GetIntSlice(\"tickets\")\n\n\ttagData := map[string]interface{}{\n\t\t\"label\": label,\n\t}\n\tif description != \"\" {\n\t\ttagData[\"description\"] = description\n\t}\n\tif len(tickets) \u003e 0 {\n\t\ttagData[\"tickets\"] = tickets\n\t}\n\n\tresponse, err := client.CreateTicketTag(cloudTempleID, tagData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getTicketTagDetails(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetTicketTagDetails(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc removeTicketTag(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.RemoveTicketTag(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc editTicketTag(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tlabel, _ := cmd.Flags().GetString(\"label\")\n\tdescription, _ := cmd.Flags().GetString(\"description\")\n\ttickets, _ := cmd.Flags().GetIntSlice(\"tickets\")\n\n\ttagData := make(map[string]interface{})\n\tif label != \"\" {\n\t\ttagData[\"label\"] = label\n\t}\n\tif description != \"\" {\n\t\ttagData[\"description\"] = description\n\t}\n\tif len(tickets) \u003e 0 {\n\t\ttagData[\"tickets\"] = tickets\n\t}\n\n\tresponse, err := client.EditTicketTag(args[0], tagData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getTicketsByTag(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetTicketsByTag(args[0], nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n",
    "size": 22956,
    "modTime": "2024-10-03T21:33:25.6738474+02:00",
    "path": "cmd\\tickets.go"
  },
  {
    "name": "users.go",
    "content": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar usersCmd = \u0026cobra.Command{\n\tUse:   \"users\",\n\tShort: \"Manage users\",\n\tLong:  `Manage users, including listing, creating, updating, and viewing user details.`,\n}\n\nfunc init() {\n\trootCmd.AddCommand(usersCmd)\n\n\t// Get users\n\tgetUsersCmd := \u0026cobra.Command{\n\t\tUse:   \"list\",\n\t\tShort: \"Get a list of users\",\n\t}\n\tgetUsersCmd.Flags().String(\"name\", \"\", \"Filter users by name\")\n\tgetUsersCmd.Flags().Bool(\"enabled\", true, \"Filter by enabled users\")\n\tgetUsersCmd.Flags().String(\"email\", \"\", \"Filter users by email address\")\n\tgetUsersCmd.Flags().Bool(\"is-contact\", false, \"Show only contact users for the tenant\")\n\n\tupdateListCommand(getUsersCmd, \"/users\", func() map[string]string {\n\t\tparams := make(map[string]string)\n\t\tparams[\"cloudTempleId\"] = cloudTempleID\n\n\t\tname, _ := getUsersCmd.Flags().GetString(\"name\")\n\t\tif name != \"\" {\n\t\t\tparams[\"name\"] = name\n\t\t}\n\n\t\tenabled, _ := getUsersCmd.Flags().GetBool(\"enabled\")\n\t\tparams[\"enabled\"] = strconv.FormatBool(enabled)\n\n\t\temail, _ := getUsersCmd.Flags().GetString(\"email\")\n\t\tif email != \"\" {\n\t\t\tparams[\"email\"] = email\n\t\t}\n\n\t\tisContact, _ := getUsersCmd.Flags().GetBool(\"is-contact\")\n\t\tparams[\"isContact\"] = strconv.FormatBool(isContact)\n\n\t\treturn params\n\t})\n\n\tusersCmd.AddCommand(getUsersCmd)\n\n\t// Create user\n\tcreateUserCmd := \u0026cobra.Command{\n\t\tUse:   \"create\",\n\t\tShort: \"Create a new User\",\n\t\tRunE:  createUser,\n\t}\n\tcreateUserCmd.Flags().String(\"firstname\", \"\", \"User's firstname\")\n\tcreateUserCmd.Flags().String(\"lastname\", \"\", \"User's lastname\")\n\tcreateUserCmd.Flags().String(\"email\", \"\", \"User's email\")\n\tcreateUserCmd.Flags().Bool(\"enabled\", true, \"Is User enabled?\")\n\tcreateUserCmd.Flags().String(\"mobile-phone\", \"\", \"User's mobile phone number\")\n\tcreateUserCmd.Flags().Bool(\"is-contact\", false, \"Is the user a contact person for its own tenant?\")\n\tcreateUserCmd.MarkFlagRequired(\"firstname\")\n\tcreateUserCmd.MarkFlagRequired(\"lastname\")\n\tcreateUserCmd.MarkFlagRequired(\"email\")\n\tusersCmd.AddCommand(createUserCmd)\n\n\t// Get user details\n\tgetUserDetailsCmd := \u0026cobra.Command{\n\t\tUse:   \"details [id]\",\n\t\tShort: \"Get User details\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  getUserDetails,\n\t}\n\tusersCmd.AddCommand(getUserDetailsCmd)\n\n\t// Update user\n\tupdateUserCmd := \u0026cobra.Command{\n\t\tUse:   \"update [id]\",\n\t\tShort: \"Update a User\",\n\t\tArgs:  cobra.ExactArgs(1),\n\t\tRunE:  updateUser,\n\t}\n\tupdateUserCmd.Flags().String(\"firstname\", \"\", \"User's firstname\")\n\tupdateUserCmd.Flags().String(\"lastname\", \"\", \"User's lastname\")\n\tupdateUserCmd.Flags().String(\"email\", \"\", \"User's email\")\n\tupdateUserCmd.Flags().Bool(\"enabled\", true, \"Is User enabled?\")\n\tupdateUserCmd.Flags().String(\"mobile-phone\", \"\", \"User's mobile phone number\")\n\tupdateUserCmd.Flags().Bool(\"is-contact\", false, \"Is the user a contact person for its own tenant?\")\n\tusersCmd.AddCommand(updateUserCmd)\n\n\t// Get logged in user details\n\tgetWhoAmICmd := \u0026cobra.Command{\n\t\tUse:   \"whoami\",\n\t\tShort: \"Get logged in user details\",\n\t\tRunE:  getWhoAmI,\n\t}\n\tusersCmd.AddCommand(getWhoAmICmd)\n\n\t// Get not assigned user details\n\tgetNotAssignedUserCmd := \u0026cobra.Command{\n\t\tUse:   \"not-assigned\",\n\t\tShort: \"Get details from the not assigned user\",\n\t\tRunE:  getNotAssignedUser,\n\t}\n\tusersCmd.AddCommand(getNotAssignedUserCmd)\n\n\t// Get on delegation user details\n\tgetOnDelegationUserCmd := \u0026cobra.Command{\n\t\tUse:   \"on-delegation\",\n\t\tShort: \"Get details from the on delegation user\",\n\t\tRunE:  getOnDelegationUser,\n\t}\n\tusersCmd.AddCommand(getOnDelegationUserCmd)\n}\n\nfunc getUsers(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tname, _ := cmd.Flags().GetString(\"name\")\n\tenabled, _ := cmd.Flags().GetBool(\"enabled\")\n\temail, _ := cmd.Flags().GetString(\"email\")\n\tisContact, _ := cmd.Flags().GetBool(\"is-contact\")\n\n\tparams := make(map[string]string)\n\tif name != \"\" {\n\t\tparams[\"name\"] = name\n\t}\n\tparams[\"enabled\"] = strconv.FormatBool(enabled)\n\tif email != \"\" {\n\t\tparams[\"email\"] = email\n\t}\n\tparams[\"isContact\"] = strconv.FormatBool(isContact)\n\n\tresponse, err := client.GetUsers(cloudTempleID, params)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc createUser(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tfirstname, _ := cmd.Flags().GetString(\"firstname\")\n\tlastname, _ := cmd.Flags().GetString(\"lastname\")\n\temail, _ := cmd.Flags().GetString(\"email\")\n\tenabled, _ := cmd.Flags().GetBool(\"enabled\")\n\tmobilePhone, _ := cmd.Flags().GetString(\"mobile-phone\")\n\tisContact, _ := cmd.Flags().GetBool(\"is-contact\")\n\n\tuserData := map[string]interface{}{\n\t\t\"firstname\": firstname,\n\t\t\"lastname\":  lastname,\n\t\t\"email\":     email,\n\t\t\"enabled\":   enabled,\n\t}\n\tif mobilePhone != \"\" {\n\t\tuserData[\"mobilePhoneNumber\"] = mobilePhone\n\t}\n\tuserData[\"isContact\"] = isContact\n\n\tresponse, err := client.CreateUser(cloudTempleID, userData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getUserDetails(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetUserDetails(args[0])\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc updateUser(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tfirstname, _ := cmd.Flags().GetString(\"firstname\")\n\tlastname, _ := cmd.Flags().GetString(\"lastname\")\n\temail, _ := cmd.Flags().GetString(\"email\")\n\tenabled, _ := cmd.Flags().GetBool(\"enabled\")\n\tmobilePhone, _ := cmd.Flags().GetString(\"mobile-phone\")\n\tisContact, _ := cmd.Flags().GetBool(\"is-contact\")\n\n\tuserData := make(map[string]interface{})\n\tif firstname != \"\" {\n\t\tuserData[\"firstname\"] = firstname\n\t}\n\tif lastname != \"\" {\n\t\tuserData[\"lastname\"] = lastname\n\t}\n\tif email != \"\" {\n\t\tuserData[\"email\"] = email\n\t}\n\tif cmd.Flags().Changed(\"enabled\") {\n\t\tuserData[\"enabled\"] = enabled\n\t}\n\tif mobilePhone != \"\" {\n\t\tuserData[\"mobilePhoneNumber\"] = mobilePhone\n\t}\n\tif cmd.Flags().Changed(\"is-contact\") {\n\t\tuserData[\"isContact\"] = isContact\n\t}\n\n\tresponse, err := client.UpdateUser(args[0], userData)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getWhoAmI(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetWhoAmI()\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getNotAssignedUser(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetNotAssignedUser()\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n\nfunc getOnDelegationUser(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tresponse, err := client.GetOnDelegationUser()\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n",
    "size": 8171,
    "modTime": "2024-10-03T21:29:37.7302558+02:00",
    "path": "cmd\\users.go"
  },
  {
    "name": "utils.go",
    "content": "package cmd\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"reflect\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nfunc formatOutput(data interface{}, format string) (string, error) {\n\tswitch strings.ToLower(format) {\n\tcase \"json\":\n\t\treturn formatJSON(data)\n\tcase \"text\":\n\t\treturn formatText(data)\n\tdefault:\n\t\treturn \"\", fmt.Errorf(\"format non pris en charge : %s\", format)\n\t}\n}\n\nfunc formatJSON(data interface{}) (string, error) {\n\tjsonBytes, err := json.MarshalIndent(data, \"\", \"  \")\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"erreur lors de la conversion en JSON : %w\", err)\n\t}\n\treturn string(jsonBytes), nil\n}\n\nfunc formatText(data interface{}) (string, error) {\n\treturn formatTextRecursive(data, 0), nil\n}\n\nfunc formatTextRecursive(v interface{}, indent int) string {\n\tindentStr := strings.Repeat(\"  \", indent)\n\n\tswitch reflect.TypeOf(v).Kind() {\n\tcase reflect.Map:\n\t\tvar builder strings.Builder\n\t\tval := reflect.ValueOf(v)\n\t\tfor _, key := range val.MapKeys() {\n\t\t\tbuilder.WriteString(fmt.Sprintf(\"%s%v: %s\\n\", indentStr, key, formatTextRecursive(val.MapIndex(key).Interface(), indent+1)))\n\t\t}\n\t\treturn builder.String()\n\tcase reflect.Slice, reflect.Array:\n\t\tvar builder strings.Builder\n\t\tval := reflect.ValueOf(v)\n\t\tfor i := 0; i \u003c val.Len(); i++ {\n\t\t\tbuilder.WriteString(fmt.Sprintf(\"%s- %s\\n\", indentStr, formatTextRecursive(val.Index(i).Interface(), indent+1)))\n\t\t}\n\t\treturn builder.String()\n\tdefault:\n\t\treturn fmt.Sprintf(\"%v\", v)\n\t}\n}\n\nfunc updateListCommand(cmd *cobra.Command, endpoint string, paramsFunc func() map[string]string) {\n\tcmd.RunE = func(cmd *cobra.Command, args []string) error {\n\t\tparams := paramsFunc()\n\n\t\t// Ajout du filtre s'il est spécifié\n\t\tif filter != \"\" {\n\t\t\tparams[\"filter\"] = filter\n\t\t}\n\n\t\t// Utilisation de StreamData pour récupérer les données\n\t\tdataChan, errChan := client.StreamData(endpoint, params, batchSize)\n\n\t\tcount := 0\n\t\tvar data []interface{}\n\n\t\t// Canal pour signaler l'arrêt de la collecte de données\n\t\tdone := make(chan struct{})\n\n\t\t// Goroutine pour collecter les données\n\t\tgo func() {\n\t\t\tdefer close(done)\n\t\t\tfor item := range dataChan {\n\t\t\t\tdata = append(data, item)\n\t\t\t\tcount++\n\t\t\t\tif limit \u003e 0 \u0026\u0026 count \u003e= limit {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\n\t\t// Attente de la fin de la collecte ou d'une erreur\n\t\tselect {\n\t\tcase \u003c-done:\n\t\t\t// La collecte est terminée normalement\n\t\tcase err := \u003c-errChan:\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"erreur lors de la récupération des données : %w\", err)\n\t\t\t}\n\t\t}\n\n\t\t// Vérification si des données ont été récupérées\n\t\tif len(data) == 0 {\n\t\t\tfmt.Println(\"Aucune donnée n'a été trouvée.\")\n\t\t\treturn nil\n\t\t}\n\n\t\t// Formatage de la sortie\n\t\toutput, err := formatOutput(data, outputFormat)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"erreur lors du formatage de la sortie : %w\", err)\n\t\t}\n\n\t\t// Affichage de la sortie\n\t\tfmt.Fprintln(os.Stdout, output)\n\n\t\treturn nil\n\t}\n\n\t// Ajout des flags communs\n\tcmd.Flags().IntVar(\u0026limit, \"limit\", 0, \"Limite le nombre de résultats retournés\")\n\tcmd.Flags().IntVar(\u0026batchSize, \"batch-size\", 100, \"Nombre d'éléments à récupérer par lot\")\n\tcmd.Flags().StringVar(\u0026filter, \"filter\", \"\", \"Filtre les résultats (format dépendant de la commande)\")\n\tcmd.Flags().StringVar(\u0026outputFormat, \"output-format\", \"json\", \"Format de sortie (json, text)\")\n}\n\nfunc intSliceToString(slice []int) string {\n\tstrSlice := make([]string, len(slice))\n\tfor i, v := range slice {\n\t\tstrSlice[i] = strconv.Itoa(v)\n\t}\n\treturn strings.Join(strSlice, \",\")\n}\n",
    "size": 3471,
    "modTime": "2024-10-03T21:43:18.5505112+02:00",
    "path": "cmd\\utils.go"
  },
  {
    "name": "views.go",
    "content": "package cmd\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar viewsCmd = \u0026cobra.Command{\n\tUse:   \"views\",\n\tShort: \"Manage monitoring views\",\n\tLong:  `Manage monitoring views, including listing hosts, services, or templates in a monitoring view.`,\n}\n\nfunc init() {\n\trootCmd.AddCommand(viewsCmd)\n\n\t// List view items\n\tlistViewItemsCmd := \u0026cobra.Command{\n\t\tUse:   \"list [type] [id]\",\n\t\tShort: \"List hosts, services or templates in a monitoring view\",\n\t\tArgs:  cobra.ExactArgs(2),\n\t\tRunE:  listViewItems,\n\t}\n\tlistViewItemsCmd.Flags().String(\"order\", \"DESC\", \"Data sort order (ASC, DESC)\")\n\tlistViewItemsCmd.Flags().String(\"order-by\", \"id\", \"Attribute of the element on which to order\")\n\tlistViewItemsCmd.Flags().Int(\"page\", 1, \"Current page\")\n\tlistViewItemsCmd.Flags().Int(\"items-per-page\", 100, \"Number of items on a single page (max 500)\")\n\tviewsCmd.AddCommand(listViewItemsCmd)\n}\n\nfunc listViewItems(cmd *cobra.Command, args []string) error {\n\tformat, _ := cmd.Flags().GetString(\"format\")\n\tviewType := args[0]\n\tid := args[1]\n\n\tif viewType != \"host\" \u0026\u0026 viewType != \"service\" \u0026\u0026 viewType != \"template\" {\n\t\treturn fmt.Errorf(\"invalid view type. Must be 'host', 'service', or 'template'\")\n\t}\n\n\torder, _ := cmd.Flags().GetString(\"order\")\n\torderBy, _ := cmd.Flags().GetString(\"order-by\")\n\tpage, _ := cmd.Flags().GetInt(\"page\")\n\titemsPerPage, _ := cmd.Flags().GetInt(\"items-per-page\")\n\n\tparams := make(map[string]string)\n\tparams[\"order\"] = order\n\tparams[\"orderBy\"] = orderBy\n\tparams[\"page\"] = fmt.Sprintf(\"%d\", page)\n\tparams[\"itemsPerPage\"] = fmt.Sprintf(\"%d\", itemsPerPage)\n\n\tresponse, err := client.GetViewItems(viewType, id, params)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Utilisation de formatOutput pour formater la réponse\n\tformattedOutput, err := formatOutput(response, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Affichage de la réponse formatée\n\tfmt.Println(formattedOutput)\n\treturn nil\n}\n",
    "size": 1893,
    "modTime": "2024-10-03T21:29:15.6379879+02:00",
    "path": "cmd\\views.go"
  },
  {
    "name": "main.go",
    "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/chrlesur/rtmscli/cmd\"\n)\n\nfunc main() {\n\tif err := cmd.Execute(); err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n}\n",
    "size": 165,
    "modTime": "2024-09-14T11:48:42.6995927+02:00",
    "path": "main.go"
  },
  {
    "name": "client.go",
    "content": "package api\r\n\r\nimport (\r\n\t\"bytes\"\r\n\t\"encoding/json\"\r\n\t\"fmt\"\r\n\t\"io/ioutil\"\r\n\t\"mime/multipart\"\r\n\t\"net/http\"\r\n\t\"net/url\"\r\n\t\"strconv\"\r\n\t\"strings\"\r\n)\r\n\r\ntype RTMSClient struct {\r\n\tapiKey  string\r\n\tbaseURL string\r\n\tclient  *http.Client\r\n}\r\n\r\nfunc NewRTMSClient(apiKey string, host string) (*RTMSClient, error) {\r\n\tif apiKey == \"\" {\r\n\t\treturn nil, fmt.Errorf(\"API key cannot be empty\")\r\n\t}\r\n\tif host == \"\" {\r\n\t\treturn nil, fmt.Errorf(\"host cannot be empty\")\r\n\t}\r\n\r\n\t// Ensure the host has a scheme\r\n\tif !strings.HasPrefix(host, \"http://\") \u0026\u0026 !strings.HasPrefix(host, \"https://\") {\r\n\t\thost = \"https://\" + host\r\n\t}\r\n\r\n\t// Ensure the host ends with \"/v1\"\r\n\tif !strings.HasSuffix(host, \"/v1\") {\r\n\t\thost = strings.TrimSuffix(host, \"/\") + \"/v1\"\r\n\t}\r\n\r\n\treturn \u0026RTMSClient{\r\n\t\tapiKey:  apiKey,\r\n\t\tbaseURL: host,\r\n\t\tclient:  \u0026http.Client{},\r\n\t}, nil\r\n}\r\n\r\nfunc (c *RTMSClient) doRequest(method, endpoint string, query url.Values, body interface{}) ([]byte, error) {\r\n\tu, err := url.Parse(c.baseURL + endpoint)\r\n\tif err != nil {\r\n\t\treturn nil, fmt.Errorf(\"error parsing URL: %w\", err)\r\n\t}\r\n\r\n\tif query != nil {\r\n\t\tu.RawQuery = query.Encode()\r\n\t}\r\n\r\n\tvar reqBody []byte\r\n\tif body != nil {\r\n\t\treqBody, err = json.Marshal(body)\r\n\t\tif err != nil {\r\n\t\t\treturn nil, fmt.Errorf(\"error marshaling request body: %w\", err)\r\n\t\t}\r\n\t}\r\n\r\n\treq, err := http.NewRequest(method, u.String(), bytes.NewBuffer(reqBody))\r\n\tif err != nil {\r\n\t\treturn nil, fmt.Errorf(\"error creating request: %w\", err)\r\n\t}\r\n\r\n\treq.Header.Set(\"X-AUTH-TOKEN\", c.apiKey)\r\n\treq.Header.Set(\"Content-Type\", \"application/json\")\r\n\r\n\tresp, err := c.client.Do(req)\r\n\tif err != nil {\r\n\t\treturn nil, fmt.Errorf(\"error sending request: %w\", err)\r\n\t}\r\n\tdefer resp.Body.Close()\r\n\r\n\trespBody, err := ioutil.ReadAll(resp.Body)\r\n\tif err != nil {\r\n\t\treturn nil, fmt.Errorf(\"error reading response body: %w\", err)\r\n\t}\r\n\r\n\tif resp.StatusCode \u003c 200 || resp.StatusCode \u003e= 300 {\r\n\t\treturn nil, fmt.Errorf(\"API request failed with status code %d: %s\", resp.StatusCode, string(respBody))\r\n\t}\r\n\r\n\treturn respBody, nil\r\n}\r\n\r\nfunc (c *RTMSClient) GetAppliances(cloudTempleID string) ([]byte, error) {\r\n\tif cloudTempleID == \"\" {\r\n\t\treturn nil, fmt.Errorf(\"cloudTempleID cannot be empty\")\r\n\t}\r\n\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\r\n\treturn c.doRequest(\"GET\", \"/appliances\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetApplianceDetails(id string) ([]byte, error) {\r\n\tif id == \"\" {\r\n\t\treturn nil, fmt.Errorf(\"appliance ID cannot be empty\")\r\n\t}\r\n\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/appliances/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetApplianceServices(id string) ([]byte, error) {\r\n\tif id == \"\" {\r\n\t\treturn nil, fmt.Errorf(\"appliance ID cannot be empty\")\r\n\t}\r\n\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/appliances/%s/services\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) SynchronizeAppliance(id string) ([]byte, error) {\r\n\tif id == \"\" {\r\n\t\treturn nil, fmt.Errorf(\"appliance ID cannot be empty\")\r\n\t}\r\n\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/appliances/%s/synchronize\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetApplianceConfiguration(id, applianceVersion, pluginsPath string) ([]byte, error) {\r\n\tif id == \"\" {\r\n\t\treturn nil, fmt.Errorf(\"appliance ID cannot be empty\")\r\n\t}\r\n\tif applianceVersion == \"\" {\r\n\t\treturn nil, fmt.Errorf(\"appliance version cannot be empty\")\r\n\t}\r\n\tif pluginsPath == \"\" {\r\n\t\treturn nil, fmt.Errorf(\"plugins path cannot be empty\")\r\n\t}\r\n\r\n\tquery := url.Values{}\r\n\tquery.Set(\"applianceVersion\", applianceVersion)\r\n\tquery.Set(\"pluginsPath\", pluginsPath)\r\n\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/appliances/%s/configuration\", id), query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetApplianceHealthCheck(id string) ([]byte, error) {\r\n\tif id == \"\" {\r\n\t\treturn nil, fmt.Errorf(\"appliance ID cannot be empty\")\r\n\t}\r\n\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/appliances/%s/healthCheck\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) PostApplianceHealthCheck(id string, healthCheck map[string]interface{}) ([]byte, error) {\r\n\tif id == \"\" {\r\n\t\treturn nil, fmt.Errorf(\"appliance ID cannot be empty\")\r\n\t}\r\n\r\n\treturn c.doRequest(\"POST\", fmt.Sprintf(\"/appliances/%s/healthCheck\", id), nil, healthCheck)\r\n}\r\n\r\nfunc (c *RTMSClient) GetCatalogs(cloudTempleID string, availableItems, isRoot bool) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tquery.Set(\"availableItems\", fmt.Sprintf(\"%t\", availableItems))\r\n\tquery.Set(\"isRoot\", fmt.Sprintf(\"%t\", isRoot))\r\n\r\n\treturn c.doRequest(\"GET\", \"/catalogs\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetDefaultCatalogs(availableItems, isRoot bool) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"availableItems\", fmt.Sprintf(\"%t\", availableItems))\r\n\tquery.Set(\"isRoot\", fmt.Sprintf(\"%t\", isRoot))\r\n\r\n\treturn c.doRequest(\"GET\", \"/catalogs/defaults\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetCatalogItems(catalogID string, enabled *bool) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tif enabled != nil {\r\n\t\tquery.Set(\"enabled\", fmt.Sprintf(\"%t\", *enabled))\r\n\t}\r\n\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/catalogs/%s/items\", catalogID), query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetRootCatalog(catalogType string, availableItems bool) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"type\", catalogType)\r\n\tquery.Set(\"availableItems\", fmt.Sprintf(\"%t\", availableItems))\r\n\r\n\treturn c.doRequest(\"GET\", \"/catalogs/root\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetHosts(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/hosts\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) CreateHost(cloudTempleID string, hostData map[string]interface{}) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\treturn c.doRequest(\"POST\", \"/hosts\", query, hostData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetHostDetails(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/hosts/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) RemoveHost(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"DELETE\", fmt.Sprintf(\"/hosts/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) UpdateHost(id string, hostData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/hosts/%s\", id), nil, hostData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetHostServices(id string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/hosts/%s/services\", id), query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) UpdateHostTags(id string, tags []int) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/hosts/%s/tags\", id), nil, map[string][]int{\"tags\": tags})\r\n}\r\n\r\nfunc (c *RTMSClient) SwitchHostMonitoring(id string, enable bool, services []int) ([]byte, error) {\r\n\tdata := map[string]interface{}{\r\n\t\t\"enable\": enable,\r\n\t}\r\n\tif services != nil {\r\n\t\tdata[\"services\"] = services\r\n\t}\r\n\treturn c.doRequest(\"POST\", fmt.Sprintf(\"/hosts/%s/monitoring\", id), nil, data)\r\n}\r\n\r\nfunc (c *RTMSClient) SwitchHostMonitoringNotifications(id string, enable bool, services []int) ([]byte, error) {\r\n\tdata := map[string]interface{}{\r\n\t\t\"enable\": enable,\r\n\t}\r\n\tif services != nil {\r\n\t\tdata[\"services\"] = services\r\n\t}\r\n\treturn c.doRequest(\"POST\", fmt.Sprintf(\"/hosts/%s/monitoring/notifications\", id), nil, data)\r\n}\r\n\r\nfunc (c *RTMSClient) GetHostsStats(cloudTempleID string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\treturn c.doRequest(\"GET\", \"/hosts/stats\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetHostTags(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/hosts/tags\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) CreateHostTag(cloudTempleID string, tagData map[string]interface{}) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\treturn c.doRequest(\"POST\", \"/hosts/tags\", query, tagData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetHostTagDetails(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/hosts/tags/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) RemoveHostTag(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"DELETE\", fmt.Sprintf(\"/hosts/tags/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) EditHostTag(id string, tagData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/hosts/tags/%s\", id), nil, tagData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetHostsByTag(id string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/hosts/tags/%s/hosts\", id), query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) CheckRTMSHealth(integrationServices []int, integrationDelay int) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tif len(integrationServices) \u003e 0 {\r\n\t\tfor _, service := range integrationServices {\r\n\t\t\tquery.Add(\"integrationServices[]\", strconv.Itoa(service))\r\n\t\t}\r\n\t}\r\n\tif integrationDelay \u003e 0 {\r\n\t\tquery.Set(\"integrationDelay\", strconv.Itoa(integrationDelay))\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/monitoring/health\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) CheckSLACalculatorHealth(updateDelay int) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tif updateDelay \u003e 0 {\r\n\t\tquery.Set(\"updateDelay\", strconv.Itoa(updateDelay))\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/monitoring/health/slaCalculator\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetMonitoringServices(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/monitoringServices\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) CreateMonitoringService(cloudTempleID string, serviceData map[string]interface{}) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\treturn c.doRequest(\"POST\", \"/monitoringServices\", query, serviceData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetMonitoringServiceDetails(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/monitoringServices/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) RemoveMonitoringService(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"DELETE\", fmt.Sprintf(\"/monitoringServices/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) UpdateMonitoringService(id string, serviceData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/monitoringServices/%s\", id), nil, serviceData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetMonitoringServiceTemplates(params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/monitoringServices/templates\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetMonitoringServicesStats(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/monitoringServices/stats\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetServiceNotifications(serviceID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/monitoringServices/%s/notifications\", serviceID), query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetAllNotifications(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/monitoringServices/notifications\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) CreateNotification(notificationData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"POST\", \"/monitoringServices/notifications\", nil, notificationData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetNotificationDetails(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/monitoringServices/notifications/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTicketSuggestions(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/monitoringServices/notifications/%s/suggest\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) AttachNotificationToTicket(id string, ticketID int) ([]byte, error) {\r\n\tdata := map[string]interface{}{\r\n\t\t\"ticket\": ticketID,\r\n\t}\r\n\treturn c.doRequest(\"POST\", fmt.Sprintf(\"/monitoringServices/notifications/%s/attach\", id), nil, data)\r\n}\r\n\r\nfunc (c *RTMSClient) DetachNotificationFromTicket(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"POST\", fmt.Sprintf(\"/monitoringServices/notifications/%s/detach\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetNotificationPerimeters(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/monitoringServices/notifications/perimeters\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetNotificationPerimeter(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/monitoringServices/notifications/perimeters/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) UpdateNotificationPerimeter(id string, perimeterData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/monitoringServices/notifications/perimeters/%s\", id), nil, perimeterData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetNotificationStaffs(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/monitoringServices/notifications/staffs\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetNotificationStaff(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/monitoringServices/notifications/staffs/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetNotificationTimePeriods(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/monitoringServices/notifications/timePeriods\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetNotificationTimePeriodStops(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/monitoringServices/notifications/timePeriodStops\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) CreateNotificationTimePeriodStop(cloudTempleID string, stopData map[string]interface{}) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\treturn c.doRequest(\"POST\", \"/monitoringServices/notifications/timePeriodStops\", query, stopData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetNotificationTimePeriodStop(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/monitoringServices/notifications/timePeriodStops/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) RemoveNotificationTimePeriodStop(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"DELETE\", fmt.Sprintf(\"/monitoringServices/notifications/timePeriodStops/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetNotificationTriggers(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/monitoringServices/notifications/triggers\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetNotificationTriggerDetails(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/monitoringServices/notifications/triggers/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetMetricHistory(id string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/monitoringServices/%s/metricHistory\", id), query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetGraphConfigurations(id string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/monitoringServices/%s/graphs\", id), query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetNagiosCommands(params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/nagiosCommands\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetNagiosCommandsTimePeriods(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tif cloudTempleID != \"\" {\r\n\t\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\t}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/nagiosCommands/timePeriods\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) ValidateNagiosPluginPackage(packageData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"POST\", \"/nagiosPlugins/validatePackage\", nil, packageData)\r\n}\r\n\r\nfunc (c *RTMSClient) UpdateNagiosCommands() ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", \"/nagiosPlugins/updateNagiosCommands\", nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTeams(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/teams\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) CreateTeam(cloudTempleID string, teamData map[string]interface{}) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\treturn c.doRequest(\"POST\", \"/teams\", query, teamData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetDefaultTeams(params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/teams/defaults\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTeamDetails(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/teams/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) RemoveTeam(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"DELETE\", fmt.Sprintf(\"/teams/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) EditTeam(id string, teamData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/teams/%s\", id), nil, teamData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTenants(params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/tenants\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) CreateTenant(tenantData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"POST\", \"/tenants\", nil, tenantData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTenantDetails(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/tenants/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTenantContacts(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/tenants/%s/contacts\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) RequestTenantDeletion(id string, delete bool) ([]byte, error) {\r\n\tdata := map[string]interface{}{\r\n\t\t\"delete\": delete,\r\n\t}\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/tenants/%s/deletionRequest\", id), nil, data)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTenantSSHKeys(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/tenants/%s/sshKeys\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GenerateTenantSSHKey(id string, keyData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"POST\", fmt.Sprintf(\"/tenants/%s/sshKeys\", id), nil, keyData)\r\n}\r\n\r\nfunc (c *RTMSClient) DeleteTenantSSHKey(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"DELETE\", fmt.Sprintf(\"/tenants/sshKeys/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) UpdateTenantSSHKey(id string, keyData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/tenants/sshKeys/%s\", id), nil, keyData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTenantWorkflowEmails(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/tenants/%s/workflowEmails\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) EditTenantWorkflowEmailsGeneralities(id string, data map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/tenants/%s/workflowEmails/generalities\", id), nil, data)\r\n}\r\n\r\nfunc (c *RTMSClient) EditTenantWorkflowEmailsCreateTicket(id string, data map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/tenants/%s/workflowEmails/createTicket\", id), nil, data)\r\n}\r\n\r\nfunc (c *RTMSClient) EditTenantWorkflowEmailsUpdateTicket(id string, data map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/tenants/%s/workflowEmails/updateTicket\", id), nil, data)\r\n}\r\n\r\nfunc (c *RTMSClient) EditTenantWorkflowEmailsValidationClientTicket(id string, data map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/tenants/%s/workflowEmails/validationClientTicket\", id), nil, data)\r\n}\r\n\r\nfunc (c *RTMSClient) EditTenantWorkflowEmailsCloseTicket(id string, data map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/tenants/%s/workflowEmails/closeTicket\", id), nil, data)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTickets(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tif cloudTempleID != \"\" {\r\n\t\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\t}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/tickets\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) CreateTicket(cloudTempleID string, ticketData map[string]interface{}) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\treturn c.doRequest(\"POST\", \"/tickets\", query, ticketData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTicketsCount(cloudTempleID string, status int) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tif status \u003e= 0 {\r\n\t\tquery.Set(\"status\", fmt.Sprintf(\"%d\", status))\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/tickets/count\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTicketDetails(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/tickets/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) EditTicket(id string, ticketData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/tickets/%s\", id), nil, ticketData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTicketCatalogs(id string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/tickets/%s/catalogs\", id), query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTicketsStats(cloudTempleID string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\treturn c.doRequest(\"GET\", \"/tickets/stats\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) ListTicketAttachments(ticketID string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/tickets/%s/attachments\", ticketID), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) UploadTicketAttachment(ticketID string, filename string, content []byte) ([]byte, error) {\r\n\tbody := \u0026bytes.Buffer{}\r\n\twriter := multipart.NewWriter(body)\r\n\tpart, err := writer.CreateFormFile(\"attachment\", filename)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\t_, err = part.Write(content)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\terr = writer.Close()\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\treq, err := http.NewRequest(\"POST\", c.baseURL+fmt.Sprintf(\"/tickets/%s/attachments\", ticketID), body)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\r\n\treq.Header.Set(\"X-AUTH-TOKEN\", c.apiKey)\r\n\r\n\tresp, err := c.client.Do(req)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tdefer resp.Body.Close()\r\n\r\n\trespBody, err := ioutil.ReadAll(resp.Body)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\tif resp.StatusCode \u003c 200 || resp.StatusCode \u003e= 300 {\r\n\t\treturn nil, fmt.Errorf(\"API request failed with status code %d: %s\", resp.StatusCode, string(respBody))\r\n\t}\r\n\r\n\treturn respBody, nil\r\n}\r\n\r\nfunc (c *RTMSClient) DownloadTicketAttachment(attachmentID string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/tickets/attachments/%s\", attachmentID), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) RemoveTicketAttachment(attachmentID string) ([]byte, error) {\r\n\treturn c.doRequest(\"DELETE\", fmt.Sprintf(\"/tickets/attachments/%s\", attachmentID), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTicketComments(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/tickets/comments\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTicketCommentsByTicket(ticketID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/tickets/%s/comments\", ticketID), query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) PostTicketComment(ticketID string, commentData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"POST\", fmt.Sprintf(\"/tickets/%s/comments\", ticketID), nil, commentData)\r\n}\r\n\r\nfunc (c *RTMSClient) EditTicketComment(commentID string, commentData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/tickets/comments/%s\", commentID), nil, commentData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTicketTags(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/tickets/tags\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) CreateTicketTag(cloudTempleID string, tagData map[string]interface{}) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\treturn c.doRequest(\"POST\", \"/tickets/tags\", query, tagData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTicketTagDetails(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/tickets/tags/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) RemoveTicketTag(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"DELETE\", fmt.Sprintf(\"/tickets/tags/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) EditTicketTag(id string, tagData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/tickets/tags/%s\", id), nil, tagData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetTicketsByTag(id string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/tickets/tags/%s/tickets\", id), query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetUsers(cloudTempleID string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", \"/users\", query, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) CreateUser(cloudTempleID string, userData map[string]interface{}) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"cloudTempleId\", cloudTempleID)\r\n\treturn c.doRequest(\"POST\", \"/users\", query, userData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetUserDetails(id string) ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/users/%s\", id), nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) UpdateUser(id string, userData map[string]interface{}) ([]byte, error) {\r\n\treturn c.doRequest(\"PATCH\", fmt.Sprintf(\"/users/%s\", id), nil, userData)\r\n}\r\n\r\nfunc (c *RTMSClient) GetWhoAmI() ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", \"/users/whoami\", nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetNotAssignedUser() ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", \"/users/notAssigned\", nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetOnDelegationUser() ([]byte, error) {\r\n\treturn c.doRequest(\"GET\", \"/users/onDelegation\", nil, nil)\r\n}\r\n\r\nfunc (c *RTMSClient) GetViewItems(viewType, id string, params map[string]string) ([]byte, error) {\r\n\tquery := url.Values{}\r\n\tfor k, v := range params {\r\n\t\tquery.Set(k, v)\r\n\t}\r\n\treturn c.doRequest(\"GET\", fmt.Sprintf(\"/views/%s/%s\", viewType, id), query, nil)\r\n}\r\nfunc (c *RTMSClient) StreamData(endpoint string, params map[string]string, batchSize int) (\u003c-chan interface{}, \u003c-chan error) {\r\n\tdataChan := make(chan interface{})\r\n\terrChan := make(chan error, 1)\r\n\r\n\tgo func() {\r\n\t\tdefer close(dataChan)\r\n\t\tdefer close(errChan)\r\n\r\n\t\toffset := 0\r\n\t\tfor {\r\n\t\t\t// Copie les paramètres originaux\r\n\t\t\tqueryParams := make(url.Values)\r\n\t\t\tfor k, v := range params {\r\n\t\t\t\tqueryParams.Set(k, v)\r\n\t\t\t}\r\n\r\n\t\t\t// Ajoute les paramètres de pagination\r\n\t\t\tqueryParams.Set(\"page\", strconv.Itoa(offset/batchSize+1))\r\n\t\t\tqueryParams.Set(\"itemsPerPage\", strconv.Itoa(batchSize))\r\n\r\n\t\t\t// Effectue la requête\r\n\t\t\tresponse, err := c.doRequest(\"GET\", endpoint, queryParams, nil)\r\n\t\t\tif err != nil {\r\n\t\t\t\terrChan \u003c- fmt.Errorf(\"erreur lors de la requête API : %w\", err)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\t// Parse la réponse JSON\r\n\t\t\tvar paginatedResp struct {\r\n\t\t\t\tData       []interface{} `json:\"data\"`\r\n\t\t\t\tPagination struct {\r\n\t\t\t\t\tTotal int `json:\"total\"`\r\n\t\t\t\t} `json:\"pagination\"`\r\n\t\t\t}\r\n\t\t\terr = json.Unmarshal(response, \u0026paginatedResp)\r\n\t\t\tif err != nil {\r\n\t\t\t\terrChan \u003c- fmt.Errorf(\"erreur lors du décodage JSON : %w\", err)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\t// Envoie les données dans le canal\r\n\t\t\tfor _, item := range paginatedResp.Data {\r\n\t\t\t\tdataChan \u003c- item\r\n\t\t\t}\r\n\r\n\t\t\t// Vérifie si on a atteint la fin des données\r\n\t\t\tif offset+len(paginatedResp.Data) \u003e= paginatedResp.Pagination.Total {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\t// Met à jour l'offset pour la prochaine requête\r\n\t\t\toffset += len(paginatedResp.Data)\r\n\t\t}\r\n\t}()\r\n\r\n\treturn dataChan, errChan\r\n}\r\n",
    "size": 29980,
    "modTime": "2024-10-03T21:46:23.2269929+02:00",
    "path": "pkg\\api\\client.go"
  },
  {
    "name": "client_test.go",
    "content": "package api\r\n\r\nimport (\r\n\t\"encoding/json\"\r\n\t\"fmt\"\r\n\t\"net/http\"\r\n\t\"net/http/httptest\"\r\n\t\"testing\"\r\n\t\"time\"\r\n)\r\n\r\nfunc TestStreamData(t *testing.T) {\r\n\tt.Run(\"Pagination normale\", func(t *testing.T) {\r\n\t\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n\t\t\toffset := r.URL.Query().Get(\"offset\")\r\n\t\t\tswitch offset {\r\n\t\t\tcase \"0\":\r\n\t\t\t\tjson.NewEncoder(w).Encode(PaginatedResponse{\r\n\t\t\t\t\tData:       []interface{}{1, 2, 3},\r\n\t\t\t\t\tPagination: struct{ Total, Offset, Limit int }{9, 0, 3},\r\n\t\t\t\t})\r\n\t\t\tcase \"3\":\r\n\t\t\t\tjson.NewEncoder(w).Encode(PaginatedResponse{\r\n\t\t\t\t\tData:       []interface{}{4, 5, 6},\r\n\t\t\t\t\tPagination: struct{ Total, Offset, Limit int }{9, 3, 3},\r\n\t\t\t\t})\r\n\t\t\tcase \"6\":\r\n\t\t\t\tjson.NewEncoder(w).Encode(PaginatedResponse{\r\n\t\t\t\t\tData:       []interface{}{7, 8, 9},\r\n\t\t\t\t\tPagination: struct{ Total, Offset, Limit int }{9, 6, 3},\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}))\r\n\t\tdefer server.Close()\r\n\r\n\t\tclient, _ := NewRTMSClient(\"fake-api-key\", server.URL)\r\n\t\tdataChan, errChan := client.StreamData(\"/test\", nil, 3)\r\n\r\n\t\tvar results []interface{}\r\n\t\tfor data := range dataChan {\r\n\t\t\tresults = append(results, data)\r\n\t\t}\r\n\r\n\t\tif err := \u003c-errChan; err != nil {\r\n\t\t\tt.Errorf(\"Erreur inattendue : %v\", err)\r\n\t\t}\r\n\r\n\t\tif len(results) != 9 {\r\n\t\t\tt.Errorf(\"Nombre de résultats incorrect. Attendu : 9, Obtenu : %d\", len(results))\r\n\t\t}\r\n\t})\r\n\r\n\tt.Run(\"Différentes tailles de lot\", func(t *testing.T) {\r\n\t\tfor _, batchSize := range []int{10, 50, 100} {\r\n\t\t\tt.Run(fmt.Sprintf(\"Taille de lot %d\", batchSize), func(t *testing.T) {\r\n\t\t\t\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n\t\t\t\t\tjson.NewEncoder(w).Encode(PaginatedResponse{\r\n\t\t\t\t\t\tData:       make([]interface{}, batchSize),\r\n\t\t\t\t\t\tPagination: struct{ Total, Offset, Limit int }{batchSize, 0, batchSize},\r\n\t\t\t\t\t})\r\n\t\t\t\t}))\r\n\t\t\t\tdefer server.Close()\r\n\r\n\t\t\t\tclient, _ := NewRTMSClient(\"fake-api-key\", server.URL)\r\n\t\t\t\tdataChan, errChan := client.StreamData(\"/test\", nil, batchSize)\r\n\r\n\t\t\t\tvar results []interface{}\r\n\t\t\t\tfor data := range dataChan {\r\n\t\t\t\t\tresults = append(results, data)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif err := \u003c-errChan; err != nil {\r\n\t\t\t\t\tt.Errorf(\"Erreur inattendue : %v\", err)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif len(results) != batchSize {\r\n\t\t\t\t\tt.Errorf(\"Nombre de résultats incorrect. Attendu : %d, Obtenu : %d\", batchSize, len(results))\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t})\r\n\r\n\tt.Run(\"Erreur API\", func(t *testing.T) {\r\n\t\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\r\n\t\t\tw.Write([]byte(\"Erreur interne du serveur\"))\r\n\t\t}))\r\n\t\tdefer server.Close()\r\n\r\n\t\tclient, _ := NewRTMSClient(\"fake-api-key\", server.URL)\r\n\t\tdataChan, errChan := client.StreamData(\"/test\", nil, 10)\r\n\r\n\t\tselect {\r\n\t\tcase \u003c-dataChan:\r\n\t\t\tt.Error(\"Données reçues alors qu'une erreur était attendue\")\r\n\t\tcase err := \u003c-errChan:\r\n\t\t\tif err == nil {\r\n\t\t\t\tt.Error(\"Erreur attendue, mais aucune erreur reçue\")\r\n\t\t\t}\r\n\t\tcase \u003c-time.After(time.Second):\r\n\t\t\tt.Error(\"Timeout en attendant l'erreur\")\r\n\t\t}\r\n\t})\r\n\r\n\tt.Run(\"Réponse JSON invalide\", func(t *testing.T) {\r\n\t\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n\t\t\tw.Write([]byte(\"JSON invalide\"))\r\n\t\t}))\r\n\t\tdefer server.Close()\r\n\r\n\t\tclient, _ := NewRTMSClient(\"fake-api-key\", server.URL)\r\n\t\tdataChan, errChan := client.StreamData(\"/test\", nil, 10)\r\n\r\n\t\tselect {\r\n\t\tcase \u003c-dataChan:\r\n\t\t\tt.Error(\"Données reçues alors qu'une erreur était attendue\")\r\n\t\tcase err := \u003c-errChan:\r\n\t\t\tif err == nil {\r\n\t\t\t\tt.Error(\"Erreur attendue, mais aucune erreur reçue\")\r\n\t\t\t}\r\n\t\tcase \u003c-time.After(time.Second):\r\n\t\t\tt.Error(\"Timeout en attendant l'erreur\")\r\n\t\t}\r\n\t})\r\n\r\n\tt.Run(\"Zéro résultat\", func(t *testing.T) {\r\n\t\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n\t\t\tjson.NewEncoder(w).Encode(PaginatedResponse{\r\n\t\t\t\tData:       []interface{}{},\r\n\t\t\t\tPagination: struct{ Total, Offset, Limit int }{0, 0, 10},\r\n\t\t\t})\r\n\t\t}))\r\n\t\tdefer server.Close()\r\n\r\n\t\tclient, _ := NewRTMSClient(\"fake-api-key\", server.URL)\r\n\t\tdataChan, errChan := client.StreamData(\"/test\", nil, 10)\r\n\r\n\t\tvar results []interface{}\r\n\t\tfor data := range dataChan {\r\n\t\t\tresults = append(results, data)\r\n\t\t}\r\n\r\n\t\tif err := \u003c-errChan; err != nil {\r\n\t\t\tt.Errorf(\"Erreur inattendue : %v\", err)\r\n\t\t}\r\n\r\n\t\tif len(results) != 0 {\r\n\t\t\tt.Errorf(\"Nombre de résultats incorrect. Attendu : 0, Obtenu : %d\", len(results))\r\n\t\t}\r\n\t})\r\n}\r\n",
    "size": 4481,
    "modTime": "2024-10-03T21:20:18.3699593+02:00",
    "path": "pkg\\client_test.go"
  }
]
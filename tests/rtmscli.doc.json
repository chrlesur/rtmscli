[
  {
    "name": "README.md",
    "content": "# RTMS CLI\r\nRTMS CLI is a command-line interface for interacting with the RTMS (Real-Time Monitoring System) API. It allows you to easily manage appliances, hosts, tickets, and more directly from your terminal.\r\n\r\n**This project is in beta version: be very vigilant when using it and report any bugs you encounter for correction**\r\n\r\n## Version\r\n\r\n- 20240914 - 1.0.0 Beta Release \r\n- 20240914 - 1.1.0 Beta Release - Enhanced catalogs and appliances management - Enhanced markdown output.\r\n\r\n## Features\r\n\r\n- Appliance management\r\n- Host and host tag management\r\n- Ticket and ticket attachment management\r\n- User management\r\n- Monitoring view visualization\r\n- Flexible output formatting (JSON, HTML, Markdown)\r\n\r\n## Prerequisites\r\n\r\n- Go 1.16 or higher\r\n- Access to the RTMS API\r\n\r\n## Installation\r\n\r\n### Installing Go\r\n\r\nBefore installing RTMS CLI, you need to have Go installed on your system. Here's how to install it on different operating systems:\r\n\r\n#### Windows\r\n\r\n1. Download the Go installer for Windows from [the official Go website](https://golang.org/dl/).\r\n2. Run the installer and follow the instructions.\r\n3. Add the Go installation path (default `C:\\Go\\bin`) to your PATH environment variable.\r\n\r\n#### macOS\r\n\r\n1. Use Homebrew (recommended):\r\n   ```\r\n   brew install go\r\n   ```\r\n   Or download the macOS installer from [the official Go website](https://golang.org/dl/).\r\n\r\n2. If using the installer, follow the provided instructions.\r\n\r\n#### Linux\r\n\r\n1. Use your distribution's package manager:\r\n   \r\n   For Ubuntu/Debian:\r\n   ```\r\n   sudo apt-get update\r\n   sudo apt-get install golang\r\n   ```\r\n   \r\n   For Fedora:\r\n   ```\r\n   sudo dnf install golang\r\n   ```\r\n\r\n   Or download the tar.gz archive from [the official Go website](https://golang.org/dl/) and install it manually.\r\n\r\n2. Configure your `GOPATH` by adding these lines to your `.bashrc` or `.zshrc` file:\r\n   ```\r\n   export GOPATH=$HOME/go\r\n   export PATH=$PATH:$GOPATH/bin\r\n   ```\r\n\r\n### Installing RTMS CLI\r\n\r\nOnce Go is installed, you can install RTMS CLI by following these steps:\r\n\r\n1. Clone the repository:\r\n   ```\r\n   git clone https://github.com/chrlesur/rtmscli.git\r\n   ```\r\n\r\n2. Navigate to the project directory:\r\n   ```\r\n   cd rtmscli\r\n   ```\r\n\r\n3. Compile and install the CLI:\r\n   ```\r\n   go build\r\n   ```\r\n\r\n## Configuration\r\n\r\nBefore using RTMS CLI, you need to configure your RTMS API key. Set the `RTMS_API_KEY` environment variable:\r\n\r\n#### Windows\r\n```\r\nsetx RTMS_API_KEY \"your_api_key_here\"\r\n```\r\nnote : reload your shell after\r\n\r\n#### macOS and Linux\r\n```\r\necho 'export RTMS_API_KEY=\"your_api_key_here\"' \u003e\u003e ~/.bashrc\r\nsource ~/.bashrc\r\n```\r\n## Important Note\r\n\r\nThe Cloud Temple ID (`-c` or `--cloud-temple-id`) is a required parameter for most commands. Make sure to include it in your commands, like this:\r\n\r\n```\r\nrtmscli [command] -c cloud_temple_id [other options]\r\n```\r\n\r\nThis ID is specific to your Cloud Temple environment and is necessary for the CLI to interact with the correct resources in the RTMS API.\r\n\r\n## Basic Usage\r\n\r\nHere are some basic usage examples of RTMS CLI:\r\n\r\n```\r\n# Display version\r\nrtmscli version\r\n\r\n# List appliances\r\nrtmscli -c cloud_temple_id appliances list\r\n\r\n# Create a ticket\r\nrtmscli -c cloud_temple_id tickets create --name=\"New ticket\" --description=\"Ticket description\"\r\n\r\n# List users with HTML output format\r\nrtmscli -c cloud_temple_id -f html users list\r\n```\r\n\r\nFor more information on available commands, use:\r\n```\r\nrtmscli --help\r\n```\r\n\r\n## Contributing\r\n\r\nContributions to this project are welcome. Please follow these steps to contribute:\r\n\r\n1. Fork the project\r\n2. Create your feature branch (`git checkout -b feature/AmazingFeature`)\r\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\r\n4. Push to the branch (`git push origin feature/AmazingFeature`)\r\n5. Open a Pull Request\r\n",
    "size": 3839,
    "modTime": "2024-09-15T10:50:25.619766+02:00",
    "path": "README.md"
  },
  {
    "name": "appliances.md",
    "content": "# Appliances\n\nThe `appliances` command allows you to manage and interact with appliances in the RTMS system.\n\n## Usage\n\n```\nrtmscli appliances [command]\n```\n\n## Available Commands\n\n### list\n\nGet a list of appliances.\n\n```\nrtmscli appliances list\n```\n\nFlags:\n- `--cloud-temple-id string`: Cloud Temple Tenant identifier (required)\n\n### details\n\nGet Appliance details.\n\n```\nrtmscli appliances details [id]\n```\n\n### services\n\nGet Appliance services.\n\n```\nrtmscli appliances services [id]\n```\n\n### synchronize\n\nSynchronize Appliance.\n\n```\nrtmscli appliances synchronize [id]\n```\n\n### configuration\n\nGet appliances configuration.\n\n```\nrtmscli appliances configuration [id]\n```\n\nFlags:\n- `--appliance-version string`: Appliance version (required)\n- `--plugins-path string`: Absolute path to the plugins installation directory on the appliance (required)\n\n### healthcheck\n\nGet a last heartbeat of an appliance.\n\n```\nrtmscli appliances healthcheck [id]\n```\n\n### post-healthcheck\n\nPosts an appliance heartbeat.\n\n```\nrtmscli appliances post-healthcheck [id]\n```\n\nFlags:\n- `--appliance-version string`: Appliance version (required)\n- `--nagios-operating-state string`: Nagios operating state (OK, WARNING, CRITICAL) (required)\n- `--details string`: Any details to explain the current operating state\n\n## Examples\n\n1. List all appliances:\n   ```\n   rtmscli appliances list --cloud-temple-id your-cloud-temple-id\n   ```\n\n2. Get details of a specific appliance:\n   ```\n   rtmscli appliances details 12345\n   ```\n\n3. Get services of a specific appliance:\n   ```\n   rtmscli appliances services 12345\n   ```\n\n4. Synchronize a specific appliance:\n   ```\n   rtmscli appliances synchronize 12345\n   ```\n\n5. Get configuration of a specific appliance:\n   ```\n   rtmscli appliances configuration 12345 --appliance-version 1.0.0 --plugins-path /path/to/plugins\n   ```\n\n6. Get the last heartbeat of a specific appliance:\n   ```\n   rtmscli appliances healthcheck 12345\n   ```\n\n7. Post a heartbeat for a specific appliance:\n   ```\n   rtmscli appliances post-healthcheck 12345 --appliance-version 1.0.0 --nagios-operating-state OK --details \"Everything is running smoothly\"\n   ```\n\nFor more information on a specific command, use `rtmscli appliances [command] --help`.\n```\n",
    "size": 2245,
    "modTime": "2024-09-15T10:46:03.8440887+02:00",
    "path": "docs\\appliances.md"
  },
  {
    "name": "catalogs.md",
    "content": "# Catalogs\r\n\r\nThe `catalogs` command allows you to manage and interact with ticket classification catalogs in the RTMS system.\r\n\r\n## Usage\r\n\r\n```\r\nrtmscli catalogs [command]\r\n```\r\n\r\n## Available Commands\r\n\r\n### list\r\n\r\nGet a list of Ticket classification catalogs and items.\r\n\r\n```\r\nrtmscli catalogs list\r\n```\r\n\r\nFlags:\r\n- `--cloud-temple-id string`: Cloud Temple Tenant identifier (required)\r\n- `--available-items`: Show classification catalog with their available items\r\n- `--is-root`: If true, only classification root catalogs will be displayed\r\n\r\n### defaults\r\n\r\nGet a list of all default ticket classification catalogs and catalog items.\r\n\r\n```\r\nrtmscli catalogs defaults\r\n```\r\n\r\nFlags:\r\n- `--available-items`: Show classification catalog with their available items\r\n- `--is-root`: If true, only classification root catalogs will be displayed\r\n\r\n### items\r\n\r\nGet a list of items for a catalog.\r\n\r\n```\r\nrtmscli catalogs items [catalog-id]\r\n```\r\n\r\nFlags:\r\n- `--enabled`: Display only enabled or disabled catalog items\r\n\r\n### root\r\n\r\nGet the root required catalog.\r\n\r\n```\r\nrtmscli catalogs root\r\n```\r\n\r\nFlags:\r\n- `--type string`: Required Catalog type (origin, perimeter, or nature) (required)\r\n- `--available-items`: Display associated catalog items\r\n\r\n## Examples\r\n\r\n1. List all catalogs:\r\n   ```\r\n   rtmscli catalogs list --cloud-temple-id your-cloud-temple-id\r\n   ```\r\n\r\n2. List all catalogs with available items:\r\n   ```\r\n   rtmscli catalogs list --cloud-temple-id your-cloud-temple-id --available-items\r\n   ```\r\n\r\n3. Get default catalogs:\r\n   ```\r\n   rtmscli catalogs defaults\r\n   ```\r\n\r\n4. Get items for a specific catalog:\r\n   ```\r\n   rtmscli catalogs items 12345\r\n   ```\r\n\r\n5. Get items for a specific catalog, showing only enabled items:\r\n   ```\r\n   rtmscli catalogs items 12345 --enabled\r\n   ```\r\n\r\n6. Get the root catalog of type \"origin\":\r\n   ```\r\n   rtmscli catalogs root --type origin\r\n   ```\r\n\r\n7. Get the root catalog of type \"perimeter\" with associated items:\r\n   ```\r\n   rtmscli catalogs root --type perimeter --available-items\r\n   ```\r\n\r\nFor more information on a specific command, use `rtmscli catalogs [command] --help`.\r\n```\r\n",
    "size": 2152,
    "modTime": "2024-09-15T10:47:40.2983709+02:00",
    "path": "docs\\catalogs.md"
  },
  {
    "name": "completion.md",
    "content": "# RTMS CLI Auto-Completion\n\nRTMS CLI supports command auto-completion for Bash, Zsh, fish, and PowerShell. This feature can significantly improve your productivity by reducing typing and helping you discover available commands and options.\n\n## Generating Completion Scripts\n\nRTMS CLI uses cobra, which provides built-in functionality to generate completion scripts. You can generate these scripts using the `rtmscli completion` command.\n\n### Bash\n\nTo generate the auto-completion script for Bash:\n\n```bash\nrtmscli completion bash \u003e rtmscli_completion.bash\n```\n\nTo use it in the current session:\n\n```bash\nsource rtmscli_completion.bash\n```\n\nTo make it permanent, add this line to your `~/.bashrc` file:\n\n```bash\nsource /path/to/rtmscli_completion.bash\n```\n\n### Zsh\n\nFor Zsh, you might need to enable command completion if you haven't already:\n\n```zsh\nautoload -Uz compinit \u0026\u0026 compinit\n```\n\nThen generate and use the completion script:\n\n```zsh\nrtmscli completion zsh \u003e \"${fpath[1]}/_rtmscli\"\n```\n\nYou may need to start a new shell for this setup to take effect.\n\n### Fish\n\nFor fish shell:\n\n```fish\nrtmscli completion fish \u003e ~/.config/fish/completions/rtmscli.fish\n```\n\n### PowerShell\n\nFor PowerShell:\n\n```powershell\nrtmscli completion powershell \u003e rtmscli_completion.ps1\n```\n\nTo use it, you need to include it in your PowerShell profile:\n\n```powershell\necho '. /path/to/rtmscli_completion.ps1' \u003e\u003e $PROFILE\n```\n\n## Using Auto-Completion\n\nOnce you've set up auto-completion, you can use it by typing `rtmscli` followed by a partial command or option, then pressing the Tab key. For example:\n\n```\nrtmscli app\u003cTab\u003e\n```\n\nThis will complete to `rtmscli appliances`.\n\nYou can also use Tab to see available options:\n\n```\nrtmscli appliances \u003cTab\u003e\n```\n\nThis will show you all the subcommands available under `appliances`.\n\n## Updating Auto-Completion\n\nIf new commands are added to RTMS CLI, you'll need to regenerate the completion script to include these new commands. Simply run the generation command again and source the new script.\n\n## Troubleshooting\n\nIf auto-completion isn't working as expected:\n\n1. Ensure you've sourced the completion script correctly.\n2. Check that your shell supports command completion.\n3. Make sure you're using the latest version of RTMS CLI.\n4. Try regenerating the completion script.\n\nIf problems persist, please report an issue on the RTMS CLI GitHub repository.\n\n## Further Reading\n\nFor more detailed information about command completion in general:\n\n- Bash: `man bash`, search for \"Programmable Completion\"\n- Zsh: `man zshcompsys`\n- Fish: `man fish-completion`\n- PowerShell: `Get-Help about_Tab_Expansion`\n\nRemember, effective use of command completion can significantly speed up your workflow with RTMS CLI!\n",
    "size": 2734,
    "modTime": "2024-09-14T22:48:54.6419679+02:00",
    "path": "docs\\completion.md"
  },
  {
    "name": "hosts.md",
    "content": "# Host Management\n\nRTMS CLI provides a comprehensive set of commands for managing hosts. This document outlines the available commands and their usage.\n\n## Available Commands\n\n- `rtmscli hosts list`: List all hosts\n- `rtmscli hosts create`: Create a new host\n- `rtmscli hosts details`: Get details of a specific host\n- `rtmscli hosts remove`: Remove a host\n- `rtmscli hosts update`: Update a host\n- `rtmscli hosts services`: Get services of a specific host\n- `rtmscli hosts tags`: Manage host tags\n- `rtmscli hosts monitoring`: Manage host monitoring\n- `rtmscli hosts stats`: Get host status statistics\n\n## Usage Examples\n\n### List Hosts\n\nTo list all hosts:\n\n```\nrtmscli hosts list\n```\n\nOptions:\n- `--name`: Filter hosts by name\n- `--status`: Filter hosts by status (UP, DOWN, PENDING, UNREACHABLE)\n- `--is-monitored`: Filter by monitored hosts\n- `--cloud-temple-id`: Specify the Cloud Temple ID (required)\n\nExample:\n```\nrtmscli hosts list --cloud-temple-id=your_id --name=server1 --status=UP\n```\n\n### Create Host\n\nTo create a new host:\n\n```\nrtmscli hosts create --name=\u003cname\u003e --address=\u003caddress\u003e\n```\n\nExample:\n```\nrtmscli hosts create --name=newserver --address=192.168.1.100\n```\n\n### Get Host Details\n\nTo get details of a specific host:\n\n```\nrtmscli hosts details [host-id]\n```\n\nExample:\n```\nrtmscli hosts details 12345\n```\n\n### Remove Host\n\nTo remove a host:\n\n```\nrtmscli hosts remove [host-id]\n```\n\nExample:\n```\nrtmscli hosts remove 12345\n```\n\n### Update Host\n\nTo update a host:\n\n```\nrtmscli hosts update [host-id] [flags]\n```\n\nExample:\n```\nrtmscli hosts update 12345 --name=updatedserver --address=192.168.1.101\n```\n\n### Get Host Services\n\nTo get services of a specific host:\n\n```\nrtmscli hosts services [host-id]\n```\n\nExample:\n```\nrtmscli hosts services 12345\n```\n\n## Managing Host Tags\n\n### Update Host Tags\n\nTo update tags for a host:\n\n```\nrtmscli hosts tags update [host-id] --tags=\u003ctag1\u003e,\u003ctag2\u003e\n```\n\nExample:\n```\nrtmscli hosts tags update 12345 --tags=production,webserver\n```\n\n## Host Monitoring\n\n### Enable/Disable Host Monitoring\n\nTo enable or disable monitoring for a host:\n\n```\nrtmscli hosts monitoring [host-id] --enable=\u003ctrue|false\u003e\n```\n\nExample:\n```\nrtmscli hosts monitoring 12345 --enable=true\n```\n\n### Enable/Disable Host Monitoring Notifications\n\nTo enable or disable monitoring notifications for a host:\n\n```\nrtmscli hosts monitoring notifications [host-id] --enable=\u003ctrue|false\u003e\n```\n\nExample:\n```\nrtmscli hosts monitoring notifications 12345 --enable=true\n```\n\n## Host Statistics\n\nTo get host status statistics:\n\n```\nrtmscli hosts stats\n```\n\n## Common Options\n\nAll host commands support the following options:\n\n- `-f, --format`: Specify output format (json, html, markdown)\n- `-H, --host`: Specify the RTMS API host (default is \"rtms-api.cloud-temple.com\")\n\nExample using format option:\n```\nrtmscli -f markdown hosts list --cloud-temple-id=your_id\n```\n\nFor more detailed information on each command and its options, use the `--help` flag:\n\n```\nrtmscli hosts --help\nrtmscli hosts [command] --help\n```\n\n## Best Practices\n\n1. Always use the `--cloud-temple-id` flag when required to ensure you're working with the correct tenant.\n2. Use tags to organize and categorize your hosts for easier management.\n3. Regularly review and update host monitoring settings to ensure optimal system oversight.\n4. Use the `hosts stats` command to get an overview of your host statuses and identify potential issues.\n\n",
    "size": 3421,
    "modTime": "2024-09-14T22:50:03.3268747+02:00",
    "path": "docs\\hosts.md"
  },
  {
    "name": "monitoring.md",
    "content": "# Monitoring in RTMS CLI\n\nRTMS CLI provides comprehensive monitoring capabilities, including system health checks, monitoring services management, and notification handling. This document outlines the available commands and their usage.\n\n## Table of Contents\n1. [System Health](#system-health)\n2. [Monitoring Services](#monitoring-services)\n3. [Notifications](#notifications)\n\n## System Health\n\nRTMS CLI allows you to check the health of the RTMS services and the SLA Calculator.\n\n### Check RTMS Services Health\n\nTo check the health of RTMS services:\n\n```\nrtmscli monitoring health [flags]\n```\n\nOptions:\n- `--integration-services`: List of service identifiers to test the delay of integration of monitoring results\n- `--integration-delay`: Delay allowed in seconds to test the delay of integration of monitoring results\n\nExample:\n```\nrtmscli monitoring health --integration-services=1,2,3 --integration-delay=60\n```\n\n### Check SLA Calculator Health\n\nTo check the health of the SLA Calculator:\n\n```\nrtmscli monitoring sla-calculator [flags]\n```\n\nOptions:\n- `--update-delay`: Delay allowed in seconds between the current time and the last update of a ticket's SLA\n\nExample:\n```\nrtmscli monitoring sla-calculator --update-delay=3600\n```\n\n## Monitoring Services\n\nRTMS CLI provides commands to manage monitoring services, including listing, creating, updating, and removing services.\n\n### List Monitoring Services\n\nTo list all monitoring services:\n\n```\nrtmscli monitoring-services list [flags]\n```\n\nOptions:\n- `--name`: Filter services by name\n- `--status`: Filter services by status (OK, WARNING, CRITICAL, UNKNOWN, PENDING)\n- `--impact`: Filter services by impact (Availability, Performance, Information, Security)\n\nExample:\n```\nrtmscli monitoring-services list --name=webserver --status=WARNING\n```\n\n### Create Monitoring Service\n\nTo create a new monitoring service:\n\n```\nrtmscli monitoring-services create [flags]\n```\n\nRequired flags:\n- `--name`: Monitoring service name\n- `--appliance`: Appliance ID\n- `--host`: Host ID\n- `--template`: Template ID\n\nExample:\n```\nrtmscli monitoring-services create --name=cpu_check --appliance=1 --host=2 --template=3\n```\n\n### Get Monitoring Service Details\n\nTo get details of a specific monitoring service:\n\n```\nrtmscli monitoring-services details [service-id]\n```\n\nExample:\n```\nrtmscli monitoring-services details 12345\n```\n\n### Update Monitoring Service\n\nTo update a monitoring service:\n\n```\nrtmscli monitoring-services update [service-id] [flags]\n```\n\nExample:\n```\nrtmscli monitoring-services update 12345 --name=new_cpu_check\n```\n\n### Remove Monitoring Service\n\nTo remove a monitoring service:\n\n```\nrtmscli monitoring-services remove [service-id]\n```\n\nExample:\n```\nrtmscli monitoring-services remove 12345\n```\n\n### Get Monitoring Service Templates\n\nTo get a list of monitoring service templates:\n\n```\nrtmscli monitoring-services templates [flags]\n```\n\nOptions:\n- `--name`: Filter template by name\n- `--impact`: Filter templates by impact\n\nExample:\n```\nrtmscli monitoring-services templates --name=cpu --impact=Performance\n```\n\n### Get Monitoring Services Statistics\n\nTo get statistics about monitoring services:\n\n```\nrtmscli monitoring-services stats [flags]\n```\n\nOptions:\n- `--host-id`: Show stats of filtered monitoring services by host\n- `--appliance-id`: Show stats of filtered monitoring services by appliance\n\nExample:\n```\nrtmscli monitoring-services stats --host-id=1234\n```\n\n## Notifications\n\nRTMS CLI provides commands to manage notifications related to monitoring services.\n\n### List Notifications\n\nTo list all notifications:\n\n```\nrtmscli monitoring-services notifications list [flags]\n```\n\nOptions:\n- `--attach`: List only notifications attached to a ticket or not\n- `--staffs`: Filter by staff identifiers\n- `--perimeters`: Filter by perimeter identifiers\n\nExample:\n```\nrtmscli monitoring-services notifications list --attach --staffs=1,2,3\n```\n\n### Create Notification\n\nTo create a new notification:\n\n```\nrtmscli monitoring-services notifications create [flags]\n```\n\nRequired flags:\n- `--service-id`: Monitoring service ID\n- `--state`: State of monitoring service (OK, WARNING, CRITICAL, UNKNOWN)\n- `--content`: Content of the notification\n- `--subject`: Subject that will be sent by email/sms\n\nExample:\n```\nrtmscli monitoring-services notifications create --service-id=1234 --state=WARNING --content=\"High CPU usage\" --subject=\"CPU Warning\"\n```\n\n### Get Notification Details\n\nTo get details of a specific notification:\n\n```\nrtmscli monitoring-services notifications details [notification-id]\n```\n\nExample:\n```\nrtmscli monitoring-services notifications details 5678\n```\n\n### Attach Notification to Ticket\n\nTo attach a notification to a ticket:\n\n```\nrtmscli monitoring-services notifications attach [notification-id] --ticket-id=[ticket-id]\n```\n\nExample:\n```\nrtmscli monitoring-services notifications attach 5678 --ticket-id=9012\n```\n\n### Detach Notification from Ticket\n\nTo detach a notification from a ticket:\n\n```\nrtmscli monitoring-services notifications detach [notification-id]\n```\n\nExample:\n```\nrtmscli monitoring-services notifications detach 5678\n```\n\n## Common Options\n\nAll monitoring commands support the following options:\n\n- `-f, --format`: Specify output format (json, html, markdown)\n- `-H, --host`: Specify the RTMS API host (default is \"rtms-api.cloud-temple.com\")\n\nFor more detailed information on each command and its options, use the `--help` flag:\n\n```\nrtmscli monitoring --help\nrtmscli monitoring-services --help\nrtmscli monitoring-services [command] --help\n```\n\n",
    "size": 5534,
    "modTime": "2024-09-14T22:50:58.7496773+02:00",
    "path": "docs\\monitoring.md"
  },
  {
    "name": "nagios.md",
    "content": "# Nagios Management\n\nRTMS CLI provides several commands for managing Nagios-related functionalities. This document outlines the available commands and their usage.\n\n## Available Commands\n\n- `rtmscli nagios commands`: Get a list of Nagios commands\n- `rtmscli nagios time-periods`: Get Nagios commands execution time periods list\n- `rtmscli nagios validate-plugin`: Validate a Nagios plugin package\n- `rtmscli nagios update-commands`: Update Nagios commands\n\n## Usage Examples\n\n### List Nagios Commands\n\nTo list all Nagios commands:\n\n```\nrtmscli nagios commands\n```\n\nOptions:\n- `--name`: Filter commands by name\n\nExample:\n```\nrtmscli nagios commands --name=check_http\n```\n\n### Get Nagios Time Periods\n\nTo get the list of Nagios command execution time periods:\n\n```\nrtmscli nagios time-periods\n```\n\nOptions:\n- `--name`: Filter time periods by name\n- `--alias`: Filter time periods by alias\n- `--cloud-temple-id`: Specify the Cloud Temple ID (optional)\n\nExample:\n```\nrtmscli nagios time-periods --name=24x7 --cloud-temple-id=your_id\n```\n\n### Validate Nagios Plugin Package\n\nTo validate a Nagios plugin package:\n\n```\nrtmscli nagios validate-plugin --package='{\"name\": \"example/plugin\", ...}'\n```\n\nThe `--package` option should contain a valid JSON string representing the plugin's composer.json file.\n\nExample:\n```\nrtmscli nagios validate-plugin --package='{\"name\": \"external/nagios-plugins\", \"description\": \"Check CPU usage over SNMP\", \"version\": \"2.3.3\", \"type\": \"project\", \"require\": {\"cloud-temple/appliance\": \"^1.0\"}, \"bin\": [\"check_ping.sh\"], \"extra\": {\"commands\": {\"check_ping.sh\": {\"readme\": \"check_ping.md\", \"pluginArgs\": \"-H $HOSTADDRESS$ -w $ARG1$ -c $ARG2$ -p 5 -t 10\"}}}}'\n```\n\n### Update Nagios Commands\n\nTo update Nagios commands:\n\n```\nrtmscli nagios update-commands\n```\n\nThis command doesn't require any additional parameters.\n\n## Common Options\n\nAll Nagios commands support the following options:\n\n- `-f, --format`: Specify output format (json, html, markdown)\n- `-H, --host`: Specify the RTMS API host (default is \"rtms-api.cloud-temple.com\")\n\nExample using format option:\n```\nrtmscli -f markdown nagios commands\n```\n\n## Nagios Plugin Package Validation\n\nThe `validate-plugin` command checks the provided composer.json against the Cloud Temple schema for Nagios plugins. Here are some key points to remember when creating a plugin package:\n\n1. The `name` field should follow the format \"vendor/package-name\".\n2. The `type` field should be set to \"project\".\n3. The `require` section should include \"cloud-temple/appliance\": \"^1.0\".\n4. The `bin` section should list all executable scripts in the package.\n5. The `extra.commands` section should describe each command, including its readme file and plugin arguments.\n\nFor more detailed information on each command and its options, use the `--help` flag:\n\n```\nrtmscli nagios --help\nrtmscli nagios [command] --help\n```\n\n",
    "size": 2877,
    "modTime": "2024-09-14T22:53:01.0805911+02:00",
    "path": "docs\\nagios.md"
  },
  {
    "name": "tenants.md",
    "content": "# Tenant Management\n\nThe RTMS CLI provides comprehensive commands for managing tenants. This document outlines the available commands and their usage, including tenant details, SSH key management, and workflow email configuration.\n\n## Available Commands\n\n### General Tenant Commands\n- `rtmscli tenants list`: List all tenants\n- `rtmscli tenants create`: Create a new tenant\n- `rtmscli tenants details`: Get details of a specific tenant\n- `rtmscli tenants contacts`: Get tenant contacts\n- `rtmscli tenants request-deletion`: Request tenant deletion\n\n### SSH Key Management\n- `rtmscli tenants ssh-keys list`: List all SSH keys of a tenant\n- `rtmscli tenants ssh-keys generate`: Generate a new SSH key for a tenant\n- `rtmscli tenants ssh-keys delete`: Delete an SSH key of a tenant\n- `rtmscli tenants ssh-keys update`: Update an SSH key\n\n### Workflow Emails\n- `rtmscli tenants workflow-emails get`: Get workflow emails details\n- `rtmscli tenants workflow-emails edit-generalities`: Edit workflow emails generalities\n- `rtmscli tenants workflow-emails edit-create-ticket`: Edit workflow emails create ticket\n- `rtmscli tenants workflow-emails edit-update-ticket`: Edit workflow emails update ticket\n- `rtmscli tenants workflow-emails edit-validation-client-ticket`: Edit workflow emails validation client ticket\n- `rtmscli tenants workflow-emails edit-close-ticket`: Edit workflow emails close ticket\n\n## Usage Examples\n\n### List Tenants\n\nTo list all tenants:\n\n```\nrtmscli tenants list\n```\n\nOptions:\n- `--name`: Filter tenants by name\n- `--responsible-team-id`: Filter by responsible team ID\n- `--sdm-id`: Filter by SDM ID\n\nExample:\n```\nrtmscli tenants list --name=\"Example Corp\" --responsible-team-id=123\n```\n\n### Create Tenant\n\nTo create a new tenant:\n\n```\nrtmscli tenants create --name=\"New Tenant\" --phone=\"1234567890\" --address=\"123 Main St\" --postal-code=\"12345\" --city=\"Example City\" --country=\"Example Country\" --responsible-team=123 --contact=456\n```\n\n### Get Tenant Details\n\nTo get details of a specific tenant:\n\n```\nrtmscli tenants details [tenant-id]\n```\n\n### Request Tenant Deletion\n\nTo request deletion of a tenant:\n\n```\nrtmscli tenants request-deletion [tenant-id] --delete=true\n```\n\n### SSH Key Management\n\nList SSH keys:\n```\nrtmscli tenants ssh-keys list [tenant-id]\n```\n\nGenerate a new SSH key:\n```\nrtmscli tenants ssh-keys generate [tenant-id] --comment=\"New key\" --is-active=true\n```\n\nDelete an SSH key:\n```\nrtmscli tenants ssh-keys delete [key-id]\n```\n\nUpdate an SSH key:\n```\nrtmscli tenants ssh-keys update [key-id] --is-active=true\n```\n\n### Workflow Emails\n\nGet workflow emails details:\n```\nrtmscli tenants workflow-emails get [tenant-id]\n```\n\nEdit workflow emails generalities:\n```\nrtmscli tenants workflow-emails edit-generalities [tenant-id] --format=HTML --from=noreply@example.com\n```\n\nEdit workflow emails for creating a ticket:\n```\nrtmscli tenants workflow-emails edit-create-ticket [tenant-id] --allow-requester=true --allow-contact=true\n```\n\n## Common Options\n\nAll tenant commands support the following options:\n\n- `-f, --format`: Specify output format (json, html, markdown)\n- `-H, --host`: Specify the RTMS API host (default is \"rtms-api.cloud-temple.com\")\n\nExample using format option:\n```\nrtmscli -f markdown tenants list\n```\n\nFor more detailed information on each command and its options, use the `--help` flag:\n\n```\nrtmscli tenants --help\nrtmscli tenants [command] --help\n```\n\n",
    "size": 3411,
    "modTime": "2024-09-14T22:54:31.4032531+02:00",
    "path": "docs\\tenants.md"
  },
  {
    "name": "tickets.md",
    "content": "# Ticket Management\n\nThe RTMS CLI provides comprehensive commands for managing tickets, including creating, updating, and viewing tickets, as well as managing ticket comments, attachments, and tags.\n\n## Available Commands\n\n### Main Ticket Commands\n- `rtmscli tickets list`: List all tickets\n- `rtmscli tickets create`: Create a new ticket\n- `rtmscli tickets count`: Get the number of tickets\n- `rtmscli tickets details`: Get details of a specific ticket\n- `rtmscli tickets edit`: Edit ticket information\n- `rtmscli tickets catalogs`: Get ticket catalogs\n- `rtmscli tickets stats`: Get ticket status statistics\n\n### Ticket Comments\n- `rtmscli tickets comments list-all`: List all ticket comments\n- `rtmscli tickets comments list`: List comments for a specific ticket\n- `rtmscli tickets comments post`: Post a new comment on a ticket\n- `rtmscli tickets comments edit`: Edit an existing comment\n\n### Ticket Attachments\n- `rtmscli tickets attachments list`: List attachments for a ticket\n- `rtmscli tickets attachments upload`: Upload an attachment to a ticket\n- `rtmscli tickets attachments download`: Download an attachment\n- `rtmscli tickets attachments remove`: Remove an attachment from a ticket\n\n### Ticket Tags\n- `rtmscli tickets tags list`: List all ticket tags\n- `rtmscli tickets tags create`: Create a new ticket tag\n- `rtmscli tickets tags details`: Get details of a specific tag\n- `rtmscli tickets tags remove`: Remove a ticket tag\n- `rtmscli tickets tags edit`: Edit a ticket tag\n- `rtmscli tickets tags tickets`: Get tickets associated with a tag\n\n## Usage Examples\n\n### List Tickets\n\nTo list all tickets:\n\n```\nrtmscli tickets list\n```\n\nOptions:\n- `--name`: Filter tickets by subject\n- `--status`: Filter tickets by status (0-6)\n- `--owner`: Filter tickets by owner name\n- `--cloud-temple-id`: Specify the Cloud Temple ID (required)\n\nExample:\n```\nrtmscli tickets list --cloud-temple-id=your_id --status=1,2 --owner=\"John Doe\"\n```\n\n### Create a Ticket\n\nTo create a new ticket:\n\n```\nrtmscli tickets create --name=\"Ticket Subject\" --description=\"Detailed description\" --cloud-temple-id=your_id\n```\n\nOptions:\n- `--owner`: Specify the owner ID\n- `--catalog-items`: Specify catalog item IDs\n\n### Get Ticket Details\n\nTo get details of a specific ticket:\n\n```\nrtmscli tickets details [ticket-id]\n```\n\n### Edit a Ticket\n\nTo edit an existing ticket:\n\n```\nrtmscli tickets edit [ticket-id] --name=\"Updated Subject\" --description=\"Updated description\"\n```\n\n### Manage Ticket Comments\n\nTo list comments for a specific ticket:\n\n```\nrtmscli tickets comments list [ticket-id]\n```\n\nTo post a new comment:\n\n```\nrtmscli tickets comments post [ticket-id] --content=\"Comment content\" --private=false\n```\n\n### Manage Ticket Attachments\n\nTo upload an attachment:\n\n```\nrtmscli tickets attachments upload [ticket-id] [file-path]\n```\n\nTo download an attachment:\n\n```\nrtmscli tickets attachments download [attachment-id] [output-path]\n```\n\n### Manage Ticket Tags\n\nTo list all ticket tags:\n\n```\nrtmscli tickets tags list\n```\n\nTo create a new tag:\n\n```\nrtmscli tickets tags create --label=\"Urgent\" --description=\"For urgent tickets\"\n```\n\n## Common Options\n\nAll ticket commands support the following options:\n\n- `-f, --format`: Specify output format (json, html, markdown)\n- `-H, --host`: Specify the RTMS API host (default is \"rtms-api.cloud-temple.com\")\n\nExample using format option:\n```\nrtmscli -f markdown tickets list --cloud-temple-id=your_id\n```\n\nFor more detailed information on each command and its options, use the `--help` flag:\n\n```\nrtmscli tickets --help\nrtmscli tickets [command] --help\n```\n\n",
    "size": 3585,
    "modTime": "2024-09-14T22:53:49.6348049+02:00",
    "path": "docs\\tickets.md"
  },
  {
    "name": "users.md",
    "content": "# User Management\n\nThe RTMS CLI provides several commands for managing users. This document outlines the available commands and their usage.\n\n## Available Commands\n\n- `rtmscli users list`: Get a list of users\n- `rtmscli users create`: Create a new user\n- `rtmscli users details`: Get user details\n- `rtmscli users update`: Update a user\n- `rtmscli users whoami`: Get logged in user details\n- `rtmscli users not-assigned`: Get details of the not assigned user\n- `rtmscli users on-delegation`: Get details of the on delegation user\n\n## Usage Examples\n\n### List Users\n\nTo list all users:\n\n```\nrtmscli users list\n```\n\nOptions:\n- `--name`: Filter users by name\n- `--enabled`: Filter by enabled users (true/false)\n- `--email`: Filter users by email address\n- `--is-contact`: Show only contact users for the tenant (true/false)\n- `--cloud-temple-id`: Specify the Cloud Temple ID (required)\n\nExample:\n```\nrtmscli users list --cloud-temple-id=your_id --name=John --enabled=true\n```\n\n### Create User\n\nTo create a new user:\n\n```\nrtmscli users create --firstname=John --lastname=Doe --email=john.doe@example.com\n```\n\nOptions:\n- `--firstname`: User's first name (required)\n- `--lastname`: User's last name (required)\n- `--email`: User's email (required)\n- `--enabled`: Is user enabled? (true/false, default is true)\n- `--mobile-phone`: User's mobile phone number\n- `--is-contact`: Is the user a contact person for its own tenant? (true/false)\n- `--cloud-temple-id`: Specify the Cloud Temple ID (required)\n\nExample:\n```\nrtmscli users create --cloud-temple-id=your_id --firstname=John --lastname=Doe --email=john.doe@example.com --mobile-phone=\"+1234567890\" --is-contact=true\n```\n\n### Get User Details\n\nTo get details of a specific user:\n\n```\nrtmscli users details [user-id]\n```\n\nExample:\n```\nrtmscli users details 12345\n```\n\n### Update User\n\nTo update an existing user:\n\n```\nrtmscli users update [user-id] [flags]\n```\n\nOptions:\n- `--firstname`: User's new first name\n- `--lastname`: User's new last name\n- `--email`: User's new email\n- `--enabled`: Update user enabled status (true/false)\n- `--mobile-phone`: User's new mobile phone number\n- `--is-contact`: Update if the user is a contact person for its own tenant (true/false)\n\nExample:\n```\nrtmscli users update 12345 --firstname=John --email=new.email@example.com --enabled=false\n```\n\n### Get Logged In User Details\n\nTo get details of the currently logged in user:\n\n```\nrtmscli users whoami\n```\n\n### Get Not Assigned User Details\n\nTo get details of the not assigned user:\n\n```\nrtmscli users not-assigned\n```\n\n### Get On Delegation User Details\n\nTo get details of the on delegation user:\n\n```\nrtmscli users on-delegation\n```\n\n## Common Options\n\nAll user commands support the following options:\n\n- `-f, --format`: Specify output format (json, html, markdown)\n- `-H, --host`: Specify the RTMS API host (default is \"rtms-api.cloud-temple.com\")\n\nExample using format option:\n```\nrtmscli -f markdown users list --cloud-temple-id=your_id\n```\n\nFor more detailed information on each command and its options, use the `--help` flag:\n\n```\nrtmscli users --help\nrtmscli users [command] --help\n```\n\n",
    "size": 3123,
    "modTime": "2024-09-14T22:55:13.9018983+02:00",
    "path": "docs\\users.md"
  },
  {
    "name": "views.md",
    "content": "# View Management\n\nThe RTMS CLI provides a command for listing items in monitoring views. This document outlines the available command and its usage.\n\n## Available Command\n\n- `rtmscli views list`: List hosts, services, or templates in a monitoring view\n\n## View Types\n\nRTMS supports three types of views:\n\n1. Host views\n2. Service views\n3. Template views\n\n## Usage Examples\n\n### List View Items\n\nTo list items in a monitoring view:\n\n```\nrtmscli views list [type] [id] [flags]\n```\n\nParameters:\n- `type`: The type of view (host, service, or template)\n- `id`: The identifier of the view\n\nOptions:\n- `--order`: Data sort order (ASC or DESC, default is DESC)\n- `--order-by`: Attribute of the element on which to order (default is \"id\")\n- `--page`: Current page (default is 1)\n- `--items-per-page`: Number of items on a single page (default is 100, max 500)\n\n### List Host View Items\n\nTo list items in a host view:\n\n```\nrtmscli views list host [view-id] [flags]\n```\n\nExample:\n```\nrtmscli views list host 12345 --order=ASC --order-by=name --page=2 --items-per-page=50\n```\n\nThis command will list the hosts in the monitoring view with ID 12345, sorted by name in ascending order, displaying the second page with 50 items per page.\n\n### List Service View Items\n\nTo list items in a service view:\n\n```\nrtmscli views list service [view-id] [flags]\n```\n\nExample:\n```\nrtmscli views list service 67890 --order=DESC --order-by=status\n```\n\nThis command will list the services in the monitoring view with ID 67890, sorted by status in descending order.\n\n### List Template View Items\n\nTo list items in a template view:\n\n```\nrtmscli views list template [view-id] [flags]\n```\n\nExample:\n```\nrtmscli views list template 54321 --items-per-page=200\n```\n\nThis command will list the templates in the monitoring view with ID 54321, displaying 200 items per page.\n\n## Common Options\n\nThe views command supports the following common options:\n\n- `-f, --format`: Specify output format (json, html, markdown)\n- `-H, --host`: Specify the RTMS API host (default is \"rtms-api.cloud-temple.com\")\n\nExample using format option:\n```\nrtmscli -f markdown views list host 12345\n```\n\nFor more detailed information on the command and its options, use the `--help` flag:\n\n```\nrtmscli views --help\nrtmscli views list --help\n```\n\n## Notes\n\n- The view type must be one of \"host\", \"service\", or \"template\". An error will be returned if an invalid type is provided.\n- The view ID is required and must be a valid identifier for an existing view in the RTMS system.\n- Pagination is supported through the `--page` and `--items-per-page` options, allowing you to navigate through large result sets.\n- Sorting can be customized using the `--order` and `--order-by` options, allowing you to sort the results based on different attributes and in ascending or descending order.\n\n",
    "size": 2820,
    "modTime": "2024-09-14T22:58:35.1035943+02:00",
    "path": "docs\\views.md"
  },
  {
    "name": "report.md",
    "content": "#### Tableau de Synthèse des Tickets\r\n\r\n| N° Ticket | Client       | Sujet                                                                                                    | Statut | Équipe               | Heure de Détection | Criticité | Pourquoi Urgent                                      |\r\n|-----------|--------------|----------------------------------------------------------------------------------------------------------|--------|----------------------|--------------------|-----------|----------------------------------------------------|\r\n| 1661617   | AVRIL        | AVR-SRV-FRDCASNA-0032 Équipement Critique Oracle Failed Jobs - Base FRDCASNA-0032_KLB00T1                | 1      | (Pôle) IFG-SQUAD-1   | 23:55              | 1         | Oracle toujours critique                            |\r\n| 1661614   | AVRIL        | AVR-SRV-FRDCASPDBS-016 Équipement Critique CHECK-ALL-UNIX-DISK                                           | 1      | (Pôle) IFG-SQUAD-1   | 23:08              | 2         | Dépassement capacité disque                         |\r\n| 1661612   | NMMTN - Valoty | VAL-UVE-AZA / UPTIME                                                                                    | 1      | (Pôle) IFG-SQUAD-2-3-4 | 21:52              | 2         | Délais de résolution comprimé                      |\r\n| 1661611   | IRD          | IRD-SRV-CENSVRAP9243 / UNIX-TIME                                                                         | 1      | (Pôle) IFG-SQUAD-2-3-4 | 21:30              | 2         | Délais de résolution comprimé                      |\r\n| 1661608   | IRD          | IRD-SRV-CENSVRAP9243 / SSH                                                                               | 1      | (Pôle) IFG-SQUAD-2-3-4 | 21:12              | 2         | Délais de résolution comprimé                      |\r\n| 1661594   | AVRIL        | Autre demande - mettre un boitier avec un switch administrable et une baie de brassage                   | 1      | (Pôle) IFG-SQUAD-1   | 17:52              | 3         | Demande hors catalogue                              |\r\n| 1661593   | SPHERE       | SPHERE-SRV-AD02 / WINDOWS-SNMP-CPU                                                                       | 1      | (Pôle) IFG-SQUAD-2-3-4 | 17:50              | 5         | SNMP moins critique                                 |\r\n| 1661588   | AVRIL        | Migration DS SNC - Site PAR7s - En HNO                                                                    | 1      | (Pôle) IFG-SQUAD-1_BACKOFFICE | 17:15      | 2         | Dépassement délai intervention                      |\r\n| 1661586   | CNG          | [EDN] Log websocket                                                                                       | 1      | (Pôle) IFG-SQUAD-2-3-4 | 17:12              | 3         | Demande service                                     |\r\n| 1661585   | AVRIL        | Tâche transverse                                                                                         | 1      | (Pôle) IFG-SQUAD-1   | 17:11              | 3         | Demande interne                                     |\r\n\r\n#### Plan d'Action pour les Criticités 1\r\n\r\n1. **Ticket N° 1661617 - AVRIL**\r\n   - **Sujet** : Équipement Critique Oracle Failed Jobs - Base FRDCASNA-0032_KLB00T1\r\n   - **Action** : Mobiliser immédiatement l'équipe DBA pour intervention prioritaire sur Oracle.\r\n\r\n2. **Ticket N° 1661614 - AVRIL**\r\n   - **Sujet** : Équipement Critique CHECK-ALL-UNIX-DISK\r\n   - **Action** : Vérifier et gérer l'utilisation du disque pour éviter des défaillances critiques. Planifier une intervention rapide.\r\n\r\nCes actions permettront de focaliser les ressources sur les problèmes les plus impactants pour la continuité des services critiques. Cela inclut des interventions immédiates sur les systèmes Oracle et la gestion des ressources disque pour prévenir les pannes.\r\n\r\n#### Critères d'Urgence et Criticité Définis\r\n- **Oracle** : Toujours critique en raison de son importance stratégique.\r\n- **SNMP** : Moins critique, car souvent utilisé pour de la surveillance non essentielle.\r\n- **Dépassement Capacité Disque** : Élevée car peut causer des interruptions de service.\r\n- **Délais de Résolution** : Important pour respecter les engagements de service (SLA).\r\n- **Demande hors catalogue** : Moins critique, sauf si impact opérationnel direct.\r\n\r\nLes tickets sont classés et les plans d'action sont proposés pour assurer une gestion efficace et prioritaire des incidents les plus critiques.",
    "size": 4563,
    "modTime": "2024-10-04T00:07:27.5278412+02:00",
    "path": "report.md"
  }
]